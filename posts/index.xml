<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on The Blog of Krishan Wyse</title><link>https://kwyse.github.io/posts/</link><description>Recent content in Posts on The Blog of Krishan Wyse</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 29 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://kwyse.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Books of 2019</title><link>https://kwyse.github.io/posts/books-of-2019/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/books-of-2019/</guid><description>I was a gamer. Was. Words on a page did not enrapture me to the degree that interactive media did. Symbiosis between the visual, aural, narrative, and interactive was beauty itself.
That's not to say I didn't read. Games have their fair share of text, but I had trouble maintaining focus when reading physical books. In fact, the first five Harry Potter books are the only fiction books I can recall reading in my life prior to graduating from university.</description><content type="html"><![CDATA[<p>I was a gamer.  <em>Was</em>.  Words on a page did not enrapture me to the degree that
interactive media did.  Symbiosis between the visual, aural, narrative, and
interactive was beauty itself.</p>
<p>That's not to say I didn't read.  Games have their fair share of text, but I had
trouble maintaining focus when reading physical books.  In fact, the first five
<em>Harry Potter</em> books are the only fiction books I can recall reading in my life
prior to graduating from university.  I read these when I was eleven, shortly
before the sixth book came out, which I bought but never finished.</p>
<p>Curiously, this lack of attention didn't translate to most other forms of
reading.  Textbooks didn't pose a problem&mdash;they were even enjoyable&mdash;and I
spent entire evenings getting lost on Wikipedia reading disjoint topics
inapplicable to my life at the time, both real and fictitious.</p>
<p>My aversion to books began bothering me more after university.  People would
speak of the joy, heartbreak, escapism, feeling, and <em>meaning</em> that they would
find in books.  I wanted to know what that was like.</p>
<p>I became aware of potential causes for a lack of focus when reading.  The desire
to read a book &ldquo;perfectly&rdquo;.  Reading OCD.  Justifying the time investment.
Justifying the effort investment.  I tackled these mainly through forced
exposure.</p>
<p><em>Game of Thrones</em> had been causing a raucous for a few years.  I knew that the
book was well regarded, even if it was the TV series that everyone seemed to be
gaping over.  I gave it a shot, finished it, and enjoyed it.  This was in 2015,
and through the remainder of that year and 2016 I read the next four books.</p>
<p>A <em>reader</em>, I was not.  The hobby was still strictly on the sidelines.  But I
was less afraid to pick up books now.  In 2017 I branched into science fiction
with <em>Rendezvous with Rama</em> and <em>Leviathan Wakes</em>.  In 2018, <em>Northern Lights</em>.
That wall in my mind that represented book reading as an unpleasant and
laborious activity&mdash;one that I had reinforced for many years&mdash;was slowly
crumbling.</p>
<p>But it was this year, in 2019, that it got wiped off of the map.</p>
<h2 id="the-rational-male-by-rollo-tomassi">The Rational Male, by <em>Rollo Tomassi</em></h2>
<p>It's December 2018.  It's almost Christmas.  People are enjoying themselves.
I'm in the pub.  I'm single.  My friend might have been single.  Sometimes it's
hard to keep track. &ldquo;Hey buddy, you should read <em>The Rational Male</em>, by Rollo
Tomassi. It will <em>change your life</em>.  But be warned, go in with an open mind,
for he has some strong opinions.&rdquo;  Oh please, they're just words and ideas about
how to get women.  As if they're going to hurt me. Pfff.</p>
<p>It's January 2019.  It's cold, I'm on my couch, and I'm reeling from what I just
read. I just finished <em>The Rational Male</em>.</p>
<p>If you look up reviews for <em>The Rational Male</em>, you will find it to a divisive
book.  I believe I'm a member of the target audience.  With their voice, I can
say it can also be a damaging book, if one lets it be.  For the following few
weeks I trudged around in an apathetic haze, bewildered at what I had read,
blurry-eyed from having my eyes ripped open and forced to view the truth of
courtship, its games and its deception.  The overriding self-preservation all of
its pawns feel as they spin their plates or dance their tongues in
mock-flattery.  The knowledge that I had witnessed this <em>for years</em> and had been
interpreting it all wrong.  What else was there to do other than sit and bear
the weight of the red pill?</p>
<p>Then I remembered that this is an opinion of one man&mdash;or one community, if I'm
being generous&mdash;and not objective truth.</p>
<p>I didn't get anywhere after reading the book, but then again I didn't put what
it had to say into practice.  And the book called me out on this.  Either one
will take what it has to say and wield in the forthcoming slaughter, or one will
&ldquo;go their own way.&rdquo;  Either way, their eyes have been opened and they will never
look at gender dynamics in the same away again.  In this, I think the book is
correct.</p>
<p>I went my own way, and my eyes were indeed opened.  I've sought the value in
between the dogma, and it is there.  I identified with its notion of the
<em>white-knight beta</em>.  I support its advocacy of ascertaining people's
motivations and using their behaviour as the best measure for their intentions.
But I now know of other books that teach these lessons more succinctly and with
less bravado.</p>
<h2 id="the-subtle-knife-by-philip-pullman">The Subtle Knife, by <em>Philip Pullman</em></h2>
<p>After <em>The Rational Male</em>, I wanted to crawl into a hole for a bit.  I looked
back on <em>Northern Lights</em> fondly and so I had no qualms pursuing the next book
the <em>His Dark Materials</em> series, <em>The Subtle Knife</em>.</p>
<p>This book grows in scope with the addition of a new protagonist.  Pullman's
unshackled remarks on religious subjugation left me with the slightest
discomfort in <em>Northern Lights</em>, despite my whole-hearted support for his
sentiment.  I was happy to see it fleshed out further in this book.</p>
<h2 id="ego-is-the-enemy-by-ryan-holiday">Ego is the Enemy, by <em>Ryan Holiday</em></h2>
<p>Evidently I still needed some answers that <em>The Rational Male</em> didn't give me.
It did, however, make numerous references to <em>The 48 Laws of Power</em>, by Robert
Greene, and through researching that I discovered Ryan Holiday, who Greene
mentored.  <em>Ego is the Enemy</em> was a small and approachable book that changed
everything.</p>
<p>If <em>The Rational Male</em> showed the ugly side of modern life, <em>Ego is the Enemy</em>
gave me new hope.  A stark difference is its focus on the self.
Self-improvement, self-benchmarking, self-restraint, and self-love.</p>
<p>It's a book filled with wisdom.  For those left wanting more, Holiday directs us
to his <a href="https://ryanholiday.net/blog/">blog</a>. There are articles on <a href="https://ryanholiday.net/how-to-read-more-a-lot-more/">reading more</a>, <a href="https://thoughtcatalog.com/ryan-holiday/2013/04/read-to-lead-how-to-digest-books-above-your-level/">reading above your level</a>, and
introduced me to the idea of a <a href="https://thoughtcatalog.com/ryan-holiday/2013/08/how-and-why-to-keep-a-commonplace-book/">commonplace book</a>.  This final gem is what made
reading practical for me.  I began taking notes in the books I was reading and
underlining phrases I found interesting.  I wrote the definitions of words I
didn't know in the margins.  Once I finished a book, I compiled the notes,
highlights, and definitions into a compendium for future reference.</p>
<p>Suddenly reading a book, any book, became a tangible way to assimilate
information.  There was a process in place.  I no longer worried that my eyes
were reading the letters but that my brain wasn't incorporating the
information.  My notes were proof of comprehension.</p>
<h2 id="sapiens-by-yuval-noah-harari">Sapiens, by <em>Yuval Noah Harari</em></h2>
<p>I wanted a popular science book that I could sink my teeth into.  One that, once
finished, would leave me with new ideas I could refer back to, a wider
vocabulary, and an enriched perspective of the world.  <em>Sapiens</em> had been making
the rounds in the office for a period in my last job and seemed like a good fit.</p>
<p>It certainly was.  It was filled to the brim with nuggets like:</p>
<ul>
<li>Humans are born underdeveloped compared to other animals and this enables more
tailored socialisation.</li>
<li><a href="https://en.wikipedia.org/wiki/Dunbar's%5Fnumber">Dunbar's number</a>, a suggested cognitive limit for the number of stable social
relationships one can form.</li>
<li>The <a href="https://en.wikipedia.org/wiki/Original%5Faffluent%5Fsociety">Original Affluent Society</a>, highlighting how ancient foragers ate wholesome
and varied diets, worked short hours and had rare exposure to infectious
disease, to contrast with the idea of humanity's supposed increasing prosperity.</li>
<li>Wheat is a remarkably successful species from an evolutionary perspective.
Cattle too, even if their existence is often short and miserable.</li>
<li>Money is essentially a means of establishing mutual trust among strangers.</li>
<li>Nothing is &ldquo;unnatural&rdquo; if considered from a biological perspective.</li>
<li>Knowledge is that which empowers, not that which is true, since truth is often
subjective.</li>
<li>Supposedly long-standing practices are surprisingly temporary.  Today's
consumerism and self-indulgent marketing would have been considered abhorrent
not all that long ago.</li>
</ul>
<p>Perception plays a key theme in this book and is something I find referenced to
in books throughout the year.</p>
<h2 id="caliban-s-war-by-james-s-dot-a-dot-corey">Caliban's War, by <em>James S. A. Corey</em></h2>
<p>Far be it from me to say you can't find wisdom in fiction.  There are a few
interesting themes here.  Post-scarcity, we may move away from the haves and
have-nots, to the engaged and the apathetic. Cascading failures in software
aren't going away and still happen in the far future, because any such system is
intrinsicly subjected to catastrophe.  And that's okay, because catastrophe is
the prelude for what comes next: renewal.</p>
<p>I was disappointed with the story. It didn't have the set pieces like the first
book and I missed Miller.  His contrast with Holden was an asset to the first
book. I wasn't left with a desire to read further into the series.</p>
<p><em>Yes, I know the ending should have made me happy, but it wasn't enough.</em></p>
<h2 id="the-amber-spyglass-by-philip-pullman">The Amber Spyglass, by <em>Philip Pullman</em></h2>
<p>So let's try the third book of a series I had thoroughly enjoyed.</p>
<p><em>The Amber Spyglass</em> was the best of the trilogy in a trilogy of good books.
There was elation and despair, interesting side characters, a grand evolution of
the mythos, and a fitting finale.  There were also ideas to ponder, on how to
make up one's own mind on one's purpose, and on the value of suffering.</p>
<p><em>The Book of Dust</em> is high on my list.</p>
<h2 id="altered-carbon-by-richard-k-dot-morgan">Altered Carbon, by <em>Richard K. Morgan</em></h2>
<p>Reading in the first-person takes getting used to.  So does detective fiction.
Oh, it's also my first cyberpunk book.  This book struck many firsts and hence I
have little to compare it with.  In places, the book was difficult to get
through.  I did enjoy it and plan to read the next in the series, but I will
explore other domains of science fiction first.</p>
<h2 id="the-chimp-paradox-by-dr-steve-peters">The Chimp Paradox, by <em>Dr Steve Peters</em></h2>
<p>A work colleague recommended <em>The Chimp Paradox</em> to me after our numerous
discussions on the role of perceptions on interpersonal relationships.</p>
<p>The book proposes that these perceptions are manifested from two opposing
entities within one's mind.  The <em>Chimp</em> is the emotional, instinctual, insecure
interpreter of feelings and operates on body language and social ques.
The <em>Human</em> is the rational, cognitive, communicative practitioner of
practicalities.  Much of the book explains how to manage one's Chimp through
nurturing it, distracting it, letting it have its way in a controlled
environment, and using irrefutable facts that it cannot argue with to convince
it of inconvenient truths.</p>
<p>There are a host of supporting characters like <em>The Computer</em>, <em>Gremlins</em>, and
<em>Goblins</em> to further help make psychological processes more relatable.
Archetypal mindsets like that of <em>Snow White</em> and the <em>Alpha Wolf</em> are described
to give anchoring.  A framework for having difficult conversations is included.
The nature of stress, both ad-hoc and chronic, is explored.  It ends with
analysing how to define one's happiness and success.</p>
<p>The book insisted on keeping things at a high level and the science behind its
assertions is relegated to one of the appendices. Its model is useful but it
left me longing for a richer examination of these topics.</p>
<h2 id="how-not-to-die-by-michael-gregor-md">How Not to Die, by <em>Michael Gregor, MD</em></h2>
<p>This was a big one.  I spent numerous journeys on the bus to and from work
plodding through <em>How Not to Die</em>.  Often is was tiresome, often downright
repetitive, but well worth it once I reached the end because it changed so much
for me.</p>
<p><em>How Not do Die</em>, supported by over one thousand references in its bibliography,
goes into the causes, symptoms, mitigations, and methods of prevention for some
of the most common diseases in the Western world.  The typical offenders, such
as diabetes and high blood pressure, are present but it also covers suicidal
depression and iatrogenic causes.  That is, diseases caused by medical
professionals themselves, typically from mistakes or questionable practices.</p>
<p>And that's only the first half of the book.  The second half explores Gregor's
<em>Daily Dozen</em> dietary guidelines. How many portions of legumes should one eat
per day, and how large should one portion be?  Are some root vegetables better
than others?  Are some greens dangerous if eaten in large amounts or day-in and
day-out?  Gregor goes into intricate detail on this and more and includes the
references to back up his assertions.</p>
<p>He also recommends ninety minutes of lighter exercise or forty minutes of
heavier exercise <em>daily</em>.  I miss the reading sessions from my commute, now that
I walk to and from work, but feel better because of it.  The book made
vegetarianism practical for me, and on many days I even manage vaganism.  His
approach to incremental changes to diet, rather than going cold-turkey, has my
full support.</p>
<h2 id="man-s-search-for-meaning-by-viktor-e-dot-frankl">Man's Search for Meaning, by <em>Viktor E. Frankl</em></h2>
<p>A different work colleague surprised me when he brought this in one day for me
to read.  This was just before a vacation to Iceland and the book was my feed
throughout.</p>
<p><em>Man's Search for Meaning</em> is a beautiful book.  It's a poignant and candid
characterisation of embracing one's suffering and turning it into strength.
Frankl gives sound arguments for his conclusions, drawn from his own
experiences.  I would relish the chance to delve into this man's mind once again
and plan to acquire my own copy of the book.</p>
<h2 id="harry-potter-and-the-philosopher-s-stone-by-j-dot-k-dot-rowling">Harry Potter and the Philosopher's Stone, by <em>J. K. Rowling</em></h2>
<p>Detective mysteries in the far future, mind models, nutritional primers, and
experiences from Holocaust victims had left me yearning for some single-minded
fantasy.  The edition sold in Tesco had gorgeous cover art and all seven books
were only £24.50.  Why not?</p>
<p>The book had starker dark undertones than I remembered from when I last read it
about fifteen years ago.  Many of the characters, even the supposedly &ldquo;good&rdquo;
ones, are portrayed as tragic and dour figures.  I'm keen to see if the
remaining books differ from my memory of them when I get round to reading them.</p>
<h2 id="the-inner-life-of-animals-by-peter-wohlleben">The Inner Life of Animals, by <em>Peter Wohlleben</em></h2>
<p>I saw a copy of <em>The Inner Life of Animals</em> for £3, so again I thought I might
as well.</p>
<p>This book is far more anecdotal than scientific.  Wohlleben's stories, whilst
charming, lack a central narrative.  I didn't have a direction of where the book
was heading.  It felt like a haphazard collection of thoughts.  I still found
value in his tales, particularly since I just need to step outside to enter his
world, but I'm not enthused to read Wohlleben's earlier and highly regarded <em>The
Inner Life of Trees</em>.</p>
<h2 id="the-spy-and-the-traitor-by-ben-macintyre">The Spy and the Traitor, by <em>Ben Macintyre</em></h2>
<p>In one word: fascinating.  Macintyre does a sensational job of weaving the
tangled tale for our KGB spy turned MI6 agent, Oleg Gordievsky, into satiating
drama.</p>
<p>Beginning with his early life, Gordievsky experiences conflicting idealogies in
his own home, some clear and some in the shadows.  Through events like the
Prague Spring, he eventually jumps ship and, as a result, plays a crucial role
in improving diplomatic relations between East and West through his influence on
both sides.  But he's found out and forced to make a daring escape from Moscow,
through Finland, into Norway, and finally to London.</p>
<p>One of the finest qualities of the book is its pacing.  I was enthralled from
start to finish.  The narrative is supported with remarks from Gordievsky
himself and those close to him, such as his wife, his mentors and friends within
the KGB, and the MI6 team that supported him prior to his public defection.
Upon finishing, I immediately went looking for another Macintyre book to add to
my list.</p>
<h2 id="unnatural-causes-by-dr-richard-shepherd">Unnatural Causes, by <em>Dr Richard Shepherd</em></h2>
<p>This book captivated me for many of the same reasons that <em>The Spy and the
Traitor</em> did.  A memoir from Shepherd's fledgling enthusiasm to become his
childhood hero, his experiences in court, at crime scenes, and of course in the
mortuary, through to his experiences in major disasters and balancing his family
life, to culminating in his struggles with PTSD.</p>
<p>Chapter after chapter demonstrates his dedication to his field.  There are
numerous references to the malleable nature of truth and justice and his own
journey to come to terms with this.  I admire his honesty when writing about
difficult subjects, even when it was about him personally.</p>
<h2 id="favourite-quotes">Favourite quotes</h2>
<p>In an effort to create my own commonplace book, here are some of my favourite
quotes from the books of this year.</p>
<blockquote>
<p>The are no gods in the universe, no nations, no money, no human rights, no laws
and no justice outside the common imagination of human beings.</p>
<p>&mdash; Yuval Noah Harari</p>
</blockquote>
<p>On the surface, this can sound downright brutal and borne of a cold, analytical
mind.  Yet I find this to be a liberating idea.  None of the things mentioned
are objective givens and hence should not be taken for granted.  That's not to
say that they don't exist, but their existence is limited to a subjective and
bounded context shared by like-minded individuals.  That empowers those
individuals to create those things as they see fit. They're in control. That is
a good thing.</p>
<blockquote>
<p>There is no way out of the imagined order. When we break down our prison walls
and run towards freedom, we are in fact running into the more spacious exercise
yard of a bigger prison.</p>
<p>&mdash; Yuval Noah Harari</p>
</blockquote>
<p>However, that control is still shared among society as a whole.  Individuals are
still subjugated to its rules.  I don't necessarily see the implied negative of
a bigger prison.  A prison that is so large that you can't see its perimeter may
still be a prison, but does that really matter?</p>
<blockquote>
<p>Biology enables, culture forbids.</p>
<p>&mdash; Yuval Noah Harari</p>
</blockquote>
<p>Likewise, I find it a liberating idea that nature itself is an enabler.  It is
humans that impose the constraints, and for good reason, because without
constraints we couldn't have order.</p>
<blockquote>
<p>If the mind of a person is free of all craving, no god can make him
miserable. Conversly, once craving arises in a person's mind, all the gods in
the universe cannot save him from suffering.</p>
<p>&mdash; Yuval Noah Harari</p>
</blockquote>
<p>This idea needn't be applied just to gods.  Any relationship that sees one party
craving something that the party has the power to provide could see a similar
dynamic.  The lesson, I believe, is to control craving or least satiate it
through your own means.  Make your wants independent of others.</p>
<blockquote>
<p>So why study history? Unlike physics or economics, history is not a means for
making accurate predictions. We study history not to know the future but to
widen our horizons, to understand that our present situation is neither natural
nor inevitable, and that we consequently have many more possibilities before us
than we imagine. For example, studying how Europeans came to dominate Africans
enables us to realise that there is nothing natural or inevitable about the
racial hierarchy, and that the world might well be arranged differently.</p>
<p>&mdash; Yuval Noah Harari</p>
</blockquote>
<p>An important reminder for a software engineer like me to widen his horizons.</p>
<blockquote>
<p>&hellip; [European empires] wielded so much power and changed the world to such an
extent that perhaps they cannot be simply labelled as good or evil. They created
the world as we know it, including the idealogies we use in order to judge them.</p>
<p>&mdash; Yuval Noah Harari</p>
</blockquote>
<p>This again goes back to perception and the temporal nature of it. Being mindful
of how you arrived at the judgement you are passing can help determine if that
judgement is fair or even applicable.</p>
<blockquote>
<p>Nothing in the comfortable lives of the urban middle class can approach the wild
excitement and sheer joy experienced by a forager band on a successful mammoth
hunt.</p>
<p>&mdash; Yuval Noah Harari</p>
</blockquote>
<p>This can't be proved nor disproved.  The more important point is that the life
you find yourself in may not be entirely aligned with your nature, and it's a
fruitful journey to explore other avenues in an effort to attain that alignment.</p>
<blockquote>
<p>Is there anything more dangerous than dissatisfied and irresponsible gods who
don't know what they want?</p>
<p>&mdash; Yuval Noah Harari</p>
</blockquote>
<p>Harari was referring to humans here, particularly as our technological prowess
grows alongside the discord of our intentions.  It's solemn rhetoric for one
possible future.</p>
<blockquote>
<p>To do something the first time was an exploration. To do it again was to take
all the things they had learned, and refine, improve, perfect.</p>
<p>&mdash; Praxidike Meng</p>
</blockquote>
<p>This highlights the almost-therapeutic respite found in repetition.</p>
<blockquote>
<p>And that's what led some of us to give our lives, and others to spend years in
solitary prayer, while all the joy of life was going to waste around us, and we
never knew.</p>
<p>&mdash; Unnamed soldier in the Land of the Dead</p>
</blockquote>
<p>How easy it is to submit to the expectations of others.  If instead, one took
responsibility for their time here, they may have more confrontation and more
uncertainty, but they wouldn't share the regret of this solider.</p>
<blockquote>
<p>I'd made myself believe that I was fine and happy and fulfilled on my own
without the love of anyone else. Being in love was like China: you knew it was
there, and no doubt it was very interesting, and some people went there, but I
never would. I'd spend all my life without ever going to China, but it wouldn't
matter, because there was all the rest of the world to visit.</p>
<p>&mdash; Mary Malone</p>
</blockquote>
<p>There is the belief of one's sovereignty in happiness and whether this can be
achieved in isolation.  Those without the means to go to China are confronted
with this fact and must come to terms with it.  It's helpful to remember that
going to China is one path of many, one destination of many, but it's a
destination put on a grand pedestal these days.  Remember that the other
destinations are still there. Even if they are not as popular to most people,
they may still hold meaning.</p>
<blockquote>
<p>&ldquo;Grace attained [from conscious understanding and a lifetime of effort] is deeper
and fuller than grace that comes freely.</p>
<p>&mdash; Xaphania</p>
</blockquote>
<p>Reward comes through work and the reward is the journey, not the result.</p>
<blockquote>
<p>Building the kingdom of heaven here and now requires one to be &ldquo;cheerful and
kind and curious and brave and patient, and [one must] study and think, and work
hard.</p>
<p>&mdash; Lyra Belacqua</p>
</blockquote>
<p>One can chose to wait for their kingdom of heaven until their next job, or once
they move to another country, or after they retire, or after they die.  Or they
could build it here and now.  It's a choice.</p>
]]></content></item><item><title>On Fundamentals</title><link>https://kwyse.github.io/posts/on-fundamentals/</link><pubDate>Wed, 28 Mar 2018 00:00:00 +0100</pubDate><guid>https://kwyse.github.io/posts/on-fundamentals/</guid><description>A recent vacation gave me time to catch up on my backlog of books. Stop Guessing, by Nat Greene, was my first target. It's a book about the tendency to guess solutions when faced with hard problems, and instead proposes a rigorous, fact-backed and systematic approach to problem solving. There is a chapter dedicated to understanding the fundamentals of the problem space that was particularly poignant to me.
If we define a hard problem as simply something that is resistant to guesses, impactful and yet hard to isolate and reproduce, then they're not uncommon in the life of a software developer.</description><content type="html"><![CDATA[<p>A recent vacation gave me time to catch up on my backlog of books.  <a href="http://www.stopguessingbook.com/"><em>Stop
Guessing</em></a>, by Nat Greene, was my first target. It's a book about the tendency to
guess solutions when faced with hard problems, and instead proposes a rigorous,
fact-backed and systematic approach to problem solving. There is a chapter
dedicated to understanding the fundamentals of the problem space that was
particularly poignant to me.</p>
<p>If we define a hard problem as simply something that is resistant to guesses,
impactful and yet hard to isolate and reproduce, then they're not uncommon in
the life of a software developer. But computers are deterministic. They
shouldn't possess these qualities, and indeed they don't, but software does. I
think one reason for this is the easiness of adopting a given abstraction.</p>
<p>Abstraction is a pillar of computer science. You're taught it from your first
foray into the field, and many of the mechanisms that feel natural to us support
it, from dependency managers to the humble function. It's necessary because
cognitive load without it would simply be too great.  But with this
proliferation, where is the guarantee that we're using <em>good</em> abstractions?</p>
<p>You need to have trust that you are. You trust that a vendor package, a piece of
hardware, or a third-party service doesn't have a security vulnerability, or
illicit data collection, or even just poor performance. You do this because it's
impractical to build a product from first principles. By giving up control,
you're getting encapsulated units of value in return. It's a compromise that the
modern world is built on, but I'm not sure that it's always fully appreciated.</p>
<p>By losing that control, you relinquish understanding of the underlying
system. You make decisions based on inferred facts rather than reality.  To
bring order, out come dogmatic processes on coding style, design patterns,
architectural patterns, usage practices; all themselves further abstractions on
underlying principles that are effectively static.</p>
<h2 id="trends-as-a-solar-system">Trends as a solar system</h2>
<p>The JavaScript ecosystem is known for framework proliferation. It's often noted
how hard it is to keep up with the latest and greatest, but I wonder how much of
this is self-imposed.</p>
<p>Imagine a star with two planets orbiting it. Most of us in industry reside on
the outer planet. We work with higher level abstractions, and we travel great
distances to keep up with the latest trends. These trends come back around, but
our solar cycle is so long that we struggle to remember the lesson learnt from
old cycles, and we must relearn.</p>
<p>The inner planet is the residence of lower-level abstractions. They too have a
cycle, but a much shorter one, and can build on their knowledge because their
solar cycle is much less.</p>
<p>And then you have the star, representing the underlying mathematics, eternal and
everlasting. This state changes very slowly, only when new fundamentals are
discovered, but we don't lose knowledge. The star only ever grows.</p>
<h2 id="to-build-or-to-understand">To build, or to understand</h2>
<p>There is a clear dilemma here. If a solution is sufficiently abstracted to
remove surface-level problems, and is easy enough to integrate, how can it make
business sense to forgo that solution and build another one from first
principles?</p>
<p>In many (all?) situations, it can't, but we don't live in this two-planet
system. We have the freedom to choose the level of abstraction that we feel is
appropriate.</p>
<p>Instead of always grabbing for the quick solution, I think it's vital to
understand what is lost. On one extreme, we have a perfectly-packaged solution
that precisely meets out needs, <em>at the current time</em>.  Maintenance and
extensibility is another story. At the other extreme, we have a solution from
first principles, probably too expensive beyond measure and one that wouldn't be
completed within our lifetimes, but one that everyone could understand given
they all had knowledge of the fundamentals, the pieces that are common to all
because they're so simple.</p>
<p>Think carefully about where you want your project to sit on that spectrum.</p>
<h2 id="learn-then-understand-then-build">Learn, then understand, then build</h2>
<p>Whilst the ideal may be impossible to achieve, I think striving for it is still
worth while. Thinking of it in terms of &ldquo;relative&rdquo; fundamentals, or
de-abstracting insofar as practical, may be helpful. By educating yourself on
the fundamentals, you're in a better position to make decisions for the layers
on top of it. Your design will take advantage of the underlying processes.</p>
<p>This will be time-consuming. The abstractions are there for a reason.  But
mastery of any field requires a deep understanding of its building blocks. And
because of the way computer science has developed over the decades, resources
are numerous.</p>
<p>I recently acquired a copy of <a href="https://www-cs-faculty.stanford.edu/~knuth/taocp.html"><em>The Art of Computer Programming</em></a>, a book on
classical computer science. It still sells well to this day, despite being first
published in the 1960s! I think that's a testament to the fact that the
fundamentals are timeless, and that they're worth learning. I'm taking my time
with it, reading it alongside complimentary material. Regardless of your chosen
passion, you can always obtain a deeper understanding of its component
parts. And so far for me, doing that has been a real pleasure.</p>
]]></content></item><item><title>Book Recommendation: Programming Rust</title><link>https://kwyse.github.io/posts/book-recommendation-programming-rust/</link><pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/book-recommendation-programming-rust/</guid><description>Most of us can agree that Rust's learning curve is steep. I've been using it for hobby projects for the last few years but I'm still hesitant to use it when I'm constrained by a deadline, because of the upfront cost in development time. And that's frustrating, because I really believe that the benefits it offers outweigh that.
Programming Rust is included in the latest Humble Functional Programming book bundle. Take a look on Amazon and you'll see it's getting some pretty rave reviews.</description><content type="html"><![CDATA[<p>Most of us can agree that Rust's learning curve is steep. I've been using it for
hobby projects for the last few years but I'm still hesitant to use it when I'm
constrained <em>by a deadline</em>, because of the upfront cost in development
time. And that's frustrating, because I really believe that the benefits it
offers outweigh that.</p>
<p><a href="http://shop.oreilly.com/product/0636920040385.do"><em>Programming Rust</em></a> is included in the latest Humble <em>Functional Programming</em>
<a href="https://www.humblebundle.com/books/functional-programming-books">book bundle</a>. Take a look on <a href="https://www.amazon.com/product-reviews/1491927283/ref=cm%5Fcr%5Fdp%5Fd%5Fcmps%5Fbtm?ie=UTF8&amp;reviewerType=all%5Freviews">Amazon</a> and you'll see it's getting some pretty rave
reviews. It's the first book that's come my way focused on Rust end-to-end.</p>
<p>Personally, I find reading a book like this from cover to cover the best way to
really <em>learn</em> a language. You need to put it into practice with projects, of
course, but projects don't teach you idioms, best practices, optimisation areas,
and language-specific quirks that you should be aware of. Neither does using the
language day in and day out at work, necessarily. This knowledge comes from
experts.</p>
<p>Just like <a href="https://en.wikipedia.org/wiki/The%5FC%5FProgramming%5FLanguage"><em>K&amp;R</em></a>, <em>C++: The Complete Reference</em>, <em>Java: The Complete Reference</em>,
and <em>Programming Ruby</em> before it gave me insight into their respective
languages, I'm hopeful <em>Programming Rust</em> can continue the trend.</p>
<h2 id="initial-impression">Initial impression</h2>
<p>So far it's exceeded expectations! The book is broken down into four sections:</p>
<ol>
<li>Fundamentals: an overview of the language and details of the borrow checker</li>
<li>Language constructs: expressions, error handling, and the module system</li>
<li>Traits and generics</li>
<li>Advanced and use case-specific Rust: IO, concurrency, and <code>unsafe</code> code</li>
</ol>
<p>I've completed the first section, comprising five chapters. The last two
chapters are about ownership and references respective. They offer the best
explanations of both topics I've come across.</p>
<p>The ownership chapter explains Rust's move semantics. Comparisons to C++ and
Python give reasons for why Rust's approach was chosen and the benefits of each
approach, but also how to recreate the other two in Rust should you need to.</p>
<p>The references chapter explains lifetimes and the rules the borrow checker
enforces, and repeats them in different scenarios so that they sink in. But by
far the most valuable part of this chapter are the diagrams explaining how
references are laid out in memory. They won't come as a shock, as the memory
model is intuitive and what you would expect, but seeing them illustrates <em>why</em>
the borrow checker complains when it does. These diagrams have been the
highlight of the book thus far.</p>
<p>I'm satisfied that my understanding of Rust has already increased dramatically
as a result of reading the first section. Given that the second section is
mostly what the <a href="https://doc.rust-lang.org/book/">official book</a> in the Rust documentation covers, I skipped
it&mdash;for now&mdash;and went straight to section three. Traits are everywhere in
Rust, yet they don't get extensive explanation in the official book. I'm glad to
see that an entire section was dedicated to them in <em>Programming Rust</em>.</p>
<p>Unfortunately, some things are still skimmed over. For instance, the
relationship between trait objects and static methods is mentioned but not
elaborated upon. The book mentions the details are tedious, and implies they are
of little consequence, but it left me wondering.  Perhaps I will have a clearer
picture on this intricacy at the end of the book. Perhaps details are included
in the section I skipped over, or elaborated upon later in the book, so I'm wary
to consider this in actual criticism at this point.</p>
<h2 id="where-to-go-from-here">Where to go from here</h2>
<p>I definitely plan to finish the book. Reading it is a joy. It definitely helps
if you go in with at least some Rust knowledge, because it ramps up quite
quickly. If you're at the stage where you understand what Rust does but still
struggle with the borrow checker and want to understand <em>why</em> it does things,
the book is targeted at you.</p>
<p>The Humble Bundle is on for another eight days of writing. <em>Real World Haskell</em>
and <em>Introducing Elixir</em> are two other books I've heard good things about and
keen to look into. They're also included in the bundle.  For $15, it's a no
brainer!</p>
]]></content></item><item><title>This Week I Discovered: Vasovagal Syncope</title><link>https://kwyse.github.io/posts/twid-vasovagal-syncope/</link><pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/twid-vasovagal-syncope/</guid><description>I sprained my ankle during the week before last. Walking was painful for the subsequent few days but it was manageable. The pain was moderate but tolerable. Then this past Tuesday I fainted! And it's related.
The medical professionals tell me that I'm completely healthy, and what happened to me is a case of vasovagal syncope. Vasovagal syncope is fainting because of your body overreacting to certain triggers. One of these triggers is pain, and it needn't even be severe pain!</description><content type="html"><![CDATA[<p>I sprained my ankle during the week before last. Walking was painful for the
subsequent few days but it was manageable. The pain was moderate but
tolerable. Then this past Tuesday I fainted! And it's related.</p>
<p>The medical professionals tell me that I'm completely healthy, and what happened
to me is a case of <em>vasovagal syncope</em>.  <a href="https://www.mayoclinic.org/diseases-conditions/vasovagal-syncope/symptoms-causes/syc-20350527">Vasovagal syncope</a> is fainting because
of your body overreacting to certain triggers. One of these triggers is pain,
and it needn't even be severe pain!</p>
<p>In my case, it happened about 20 minutes after I woke up. The first time I put
weight on my ankle every morning still hurts, but on that morning it caused me
to feel nauseas, faint&mdash;luckily only into a table, and the only damage is a
little scratch on my neck&mdash;and come-to in a cold sweat.</p>
<p>The cause is a lowered heart rate and blood pressure that lasts only a few
seconds, but this is enough to stop feeding oxygen to your brain and cause you
to black-out. You can prevent it by lying down immediately, so that blood can
reach your brain more easily.</p>
<p>This is the first time I've fainted and, whilst a little scary, was educational
more than anything else. It's fascinating to know how your body responds to
certain predicaments, and how you can respond to those responses when they're
not ideal.</p>
]]></content></item><item><title>This Week I Discovered: CliftonStrengths</title><link>https://kwyse.github.io/posts/twid-clifton-strenths/</link><pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/twid-clifton-strenths/</guid><description>I came across this talk by Scott Dinsmore. It's geared towards those who feel trapped trapped in their current circumstances, yet my main take-away was his recommendation on StrengthsFinder 2.0, now called CliftonStrengths. I took the plunge and bought it since this isn't the first time it's been recommended.
The book itself is only half of what you're getting as the back sleeve includes a code you can use to take the online assessment.</description><content type="html"><![CDATA[<p>I came across <a href="https://www.ted.com/talks/scott%5Fdinsmore%5Fhow%5Fto%5Ffind%5Fwork%5Fyou%5Flove">this talk</a> by Scott Dinsmore. It's geared towards those who feel
trapped trapped in their current circumstances, yet my main take-away was his
recommendation on StrengthsFinder 2.0, now called CliftonStrengths. I took the
plunge and bought it since this isn't the first time it's been recommended.</p>
<p>The book itself is only half of what you're getting as the back sleeve includes
a code you can use to take the online assessment. It will tell you your top five
strengths, of 34, that were devised by this system after you answer 177
Likert-type questions. Rather than mitigating your weaknesses&mdash;which the book
claims modern society promotes&mdash;you can purportedly get a better return on
investment for your time by focusing on improving these strength traits.</p>
<p>The book includes a useful analogy. If you spend a lot of time (say a <em>10</em> in
effort) honing a skill you have little talent in (say a <em>3</em>), then you're
effectively as skilled as someone who puts in little effort (a <em>3</em>), but has
natural talent (a <em>10</em>). That is, the relationship is commutative. To get the
biggest returns, you need <em>both</em> talent and effort investment. Hence, it
suggests you should focus on what you're already good at.</p>
<h2 id="the-themes">The themes</h2>
<p>The 34 themes aren't things like analytic ability, strength with numbers, or
drawing skill. The book claims these are inherently learned skills that require
knowledge and practice. Instead these themes are <em>consistency</em>, <em>discipline</em>,
<em>empathy</em>, <em>focus</em>, and <em>ideadation</em>.  <em>Communication</em>, <em>positivity</em> and
<em>self-assurance</em>. <em>Harmony</em> and <em>responsibility</em>. They operate on a higher
level.</p>
<p>Each theme has a detailed description, a list of action points to take away, and
how to work with people who possess them. However, the book recommends that you
first take the online assessment before reading the theme descriptions, perhaps
not to influence you.</p>
<h2 id="the-online-assessment">The online assessment</h2>
<p>I was convinced, and keen to take the assessment, but the excitement didn't
last. It is hard to maintain focus for 177 questions, especially because you are
timed and only given a maximum of 20 seconds for each.  The whole thing took a
little under an hour to complete.</p>
<p>The questions themselves are odd. They are not along the spectrum of <em>strongly
agree</em> to <em>strongly disagree</em>. Instead both sides of the spectrum are <em>strongly
agree</em>, with two different phrases on each side.  This wouldn't be an issue if
the statements were opposites, and in some cases they are, but <em>most are
not</em>. Often the statements were completely unrelated. If I disagreed with both,
then I could simply select <em>neutral</em>, but that only happened once. Much more
often was the case where I agreed with both statements on the scale, in which
case I had to pick whichever I felt stronger about, but that is difficult when
they are unrelated topics, when you only have 20 seconds to answer, and when
you've already answered dozens of questions like that already.</p>
<p>Safe to say, I was discouraged upon completing the test. I wasn't sure on what
exactly it was assessing. My results only confirmed that. My top five theme
descriptions had familiarity, but I would only consider one of them to be
strength. Another I would consider to be a weakness, determined from my own
introspection and feedback I've had in the past.</p>
<h2 id="improving-my-mental-models">Improving my mental models</h2>
<p>I read somewhere before that reading needn't be about remembering facts and
methodologies, but instead to adjust our mental models of how things work. I
took the opportunity to finish the book, reading through all 34 themes. Some of
them resonated with me far more than the five I was given.</p>
<p>Therein lies the value for me. It's given me awareness of traits I never thought
were an asset, and a few ideas on how to leverage them. No online assessment
will be able to know you like you know yourself, but that doesn't invalidate the
premise behind the classifications.</p>
<p>As I write this, I'm in the process of going through all 34 themes and, one by
one, writing a paragraph on how I think the theme applies to me based on
evidence of past actions and behaviour. Then I am grading this applicability to
me on a five-point scale. The final ordering should give me a roadmap for the
strengths I have the greatest potential to develop.</p>
]]></content></item><item><title>Five Month's Into the Hacker's Diet</title><link>https://kwyse.github.io/posts/five-months-into-hackers-diet/</link><pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/five-months-into-hackers-diet/</guid><description>I've always had weight problems. Only in recent years has it gotten under control and landed me comfortably in the overweight category, like I was last summer. It wasn't life threatening but it wasn't ideal either. For the most part it was stable, and I was stable living with it. Yet it only took one comment from a work colleague, one with harmless intention, to change my mind on that.</description><content type="html"><![CDATA[<p>I've always had weight problems. Only in recent years has it gotten under
control and landed me comfortably in the overweight category, like I was last
summer. It wasn't life threatening but it wasn't ideal either. For the most part
it was stable, and I was stable living with it. Yet it only took one comment
from a work colleague, one with harmless intention, to change my mind on that.</p>
<p>Sometime in early August, I same across the <a href="http://www.fourmilab.ch/hackdiet/">Hacker's Diet</a> and finished it within
a week or two. You can find the full text available online. The book is directed
towards engineers and approaches the human body like a machine, one with inputs
and outputs. A machine that you can tune to get the results you want. It's quite
contrary to other diet books that suggest slow and methodical lifestyle
changes. Instead it asks you to measure everything, monitor consistently, and
reassess constantly with the information you have. It's a feedback loop that, so
far, has been effective.</p>
<h2 id="the-eat-watch">The Eat Watch</h2>
<p>The eat watch is the centrepiece introduced in the book. The premise is that
some of us are predispositioned to eat more (or less) than our body needs
because we don't receive the &ldquo;full&rdquo; (or &ldquo;hungry&rdquo;) signal in time, or at all. The
eat watch is an imaginary accessory that lights up when you should eat and turns
off when you shouldn't. Hence, you're relying on your watch rather than your
body for the information.</p>
<p>In reality, the eat watch manifests itself in calorie counting and eating
prepared meals. The goal is to count everything. As noted in the book, eating a
few slices of cheese in the evenings can amount to a weight gain of 0.6
kilograms per month. Being aware of seemingly-inconsequential snack-eating is
very powerful. If you monitor <em>everything</em> then you don't need to think about if
you're overeating or undereating.</p>
<p>I monitored calorie intake with prepared meals. Thankfully I don't get bored of
eating the same food day in and day out. If you do, that's okay too. You just
need to be aware of the calorie contents of the different meals. Averaging them
over the weak may help ease calculations. All you need are the daily totals of
your calorie intake, and weekly if you want to plot trends.</p>
<h2 id="burning-fat-by-undereating">Burning fat by undereating</h2>
<p>This is controversial. Every single friend, family member and
physician/nutritionist/personal trainer I have ever spoken to has recommended
against this. They say that going under your recommended calorie intake by any
significant amount will force your body into &ldquo;starvation mode&rdquo; and that once you
stop you will put all the weight back on, because your metabolism will be so
slow. On top of that, you'll be miserable, unproductive at work, always tired,
and unable to get results from exercise.</p>
<p>I have found most of this to be untrue. Let me clarify what my significant
amount was. I'm a 179cm-tall 24-year-old male. From online research, talks with
nutritionists, and my own experimentation, I should be eating around 2400
calories per day to maintain my weight. Instead, I was 1600 calories some days
and 1200 calories other days, by skipping dinner, during the peak of this diet.</p>
<p>This, in my opinion, is the best lesson in this book. I never would have dared
attempt a calorie deficit that large prior to reading it. The experience was not
nearly as bad as people suggest. I was not miserable, because I was working
towards a goal that was important to me, and I was never at risk of feeling
guilty from eating. I didn't feel less productive at work and nobody every
confronted me about it. I was no more tired than usual, sometimes less so, which
I put down to not feeling as bloated.</p>
<p>Maintaining your metabolism is tricky and you need to be careful.  Thankfully
the book introduces a plan for that as well.</p>
<h2 id="the-five-basic-exercises">The Five Basic Exercises</h2>
<p>Back in the 1950s, the Royal Canadian Air Force developed a training regime for
pilots stationed on remote air bases that wouldn't have had access to gym
equipment. The regime needed to rely exclusively on bodyweight exercises and be
able to keep someone in optimal condition in minimal workout time. The regime
was called <em>5BX</em> and you can find the plan <a href="http://fit450.com/HTML/5BX%5FIntro.html">online</a>.</p>
<p>The book contains its own plan modelled after 5BX, but I decided to stick with
the original. I think the details of the plan are less important than just
<em>doing exercise regularly</em>, preferably everyday. 5BX can be completed in 11
minutes. I did it every morning just after waking up. On top of that, I went to
the gym on Saturdays and Sundays and do cardio and weights. With that level of
activity, my metabolism had a hard time slowing down.</p>
<h2 id="results">Results</h2>
<p>The best test for a slow metabolism is the holiday season! I stopped heading to
the gym around mid-December, but I continued with my 5BX workout everyday. And I
was eating whatever I wanted. Granted, I wasn't reckless, and rarely went over
3000 calories on a given day, but I stopped following my eating plan and relaxed
my constraints on the types of food I was allowed. Cake, crumble and cranberry
sauce were all on the table.</p>
<p>This was a conscious choice. When I started the plan back in August, I was about
87 kilograms. I wanted to be 72 kilograms, which seemed like a good weight for
my height and build. I decided to aim for that by Christmas. I was aware that
this goal was ridiculously ambitious but worked towards it anyway. I needed to
lose 15 kilograms and that would give me about 15 weeks to do it. One kilogram
of body fat is equivalent to 7700 calories, meaning I would need to have a daily
calorie deficit of 1100 calories, so a daily calorie intake of 1300 calories on
average.  If I had a perfect run, that is certainly possible to hit.</p>
<figure>
    <img src="/images/hackers_diet_five_months.png"/> 
</figure>

<p>I didn't hit it, but I made a big dent. This is a plot of my progress.  The blue
line is my actual weight as recorded every morning. I started the eating plan in
mid-August and started weight measurements on the 27th of August. The two
periods of flat recordings in late September and late November are when I was on
vacation and didn't have access to a weighing scale. The red line is an
exponentially smoothed moving average with 10% smoothing. Provided the red line
is declining, weight is decreasing. The red line helps smooth out the variance
present in daily weight measurements and is meant to represent the true weight.</p>
<p>My weight certainly went up in December, but the amount was marginal.  Once
January came around, I quickly recovered from it. I'm confident that the weight
increase was down to increased food intake, not a change in my metabolism. I
started back at the gym on weekends in early January and was able to perform at
the same level on weights, and near the same level on cardio. I certainly felt
my chest got weaker over the holiday period because I wasn't running, but don't
think I lost much muscle mass. I put that down to 5BX, which in many ways saved
Christmas!</p>
<h2 id="losing-that-final-third">Losing that final third</h2>
<p>Maybe I should be 72 kilograms, maybe not. I still think there is potential in
this plan, but I am now firmly in the period of diminishing returns. My BMI
shifted from the middle of the <em>overweight</em> category to the upper part of the
<em>healthy</em> weight category during this chapter of the journey so I definitely
consider it a success and perhaps even complete.</p>
<p>Perhaps for the first time, weight is not the goal. I have began looking into
body weight strength training in greater depth. 5BX gave me a different way to
measure strength training that I didn't have before, namely the number of reps I
can do. It's a different mindset to using exercise machines where the weight can
be arbitrarily adjusted to be challenging. Sure it feels good to be able to
chest press more weight, but being able to do just one more press-up has given
me more satisfaction.</p>
<p>The recent <a href="https://www.humblebundle.com/books/work-it-out-books">Work It Out</a> Humble Bundle contains a lot of food for
thought. Included were a few body weight strength training books, diet books and
mindfulness books. I've began reading <em>Body Weight Strength Training</em>, which
contains a workout plan in a similar vain to <em>5BX</em> but across 40 different
exercises. I've spent the last few weeks getting used to them all. Now that I'm
a healthy weight, I want to focus on building functional strength rather than
weight loss. There is a lot to think about where to go from here, but I'm happy
about the progress made thus far.</p>
]]></content></item><item><title>This Week I Discovered: Tmux</title><link>https://kwyse.github.io/posts/twid-tmux/</link><pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/twid-tmux/</guid><description>Tmux seems like a natural progression from last week's Vim Minimalism, right? It's associated with the typical Vim power user setup. I remember playing with it back when I first started using Vim as well. The problem I had was why. Vim already has panes, what many other applications would call split windows. And if you use a tiling window manager like i3, you have panes at the application level as well.</description><content type="html"><![CDATA[<p>Tmux seems like a natural progression from last week's <a href="/posts/twid-vim-minimalism">Vim Minimalism</a>, right?
It's associated with the typical Vim power user setup. I remember playing with
it back when I first started using Vim as well. The problem I had was <em>why</em>. Vim
already has panes, what many other applications would call split windows. And if
you use a tiling window manager like <a href="https://i3wm.org/">i3</a>, you have panes at the application level
as well.</p>
<p><a href="https://github.com/tmux/tmux/wiki">Tmux</a> fills in the middle ground, operating at the shell session level. When you
launch <code>tmux</code> in a shell session, it will spin up the tmux <em>server</em>, launch the
<em>client</em>, and put you in a <em>session</em> with one <em>window</em> and one <em>pane</em>. You can
spawn as many sessions as you want, detaching and re-attaching among them. They
are independent of each other. Each window belongs to a session and acts similar
to tabs in other applications. Each pane belongs to a window a controls a
particular part of the screen. Like sessions, you can spawn as many windows and
panes as you wish, rearrange them, and move them to other sessions and windows
respectively.</p>
<p>Why is this useful? Organisation. A key difference between my first trial with
tmux some years ago and this past week is that I now have a job and work more in
the shell. Yes, you can achieve this with a tiling window manager, or even
inside terminals themselves. Both <a href="https://www.iterm2.com/">iTerm2</a> on OS X and <a href="https://gnometerminator.blogspot.co.uk/p/introduction.html">Terminator</a> support panes
and tabs. But tmux is cross-platform, and configuration portability is a big
boon if you work on multiple machines.</p>
<h2 id="making-it-work-for-you">Making it work for you</h2>
<p>And configurable it is! Read through the man page and you'll see all the
possibilities. Look online and you'll see all the people taking advantage of
that. Perhaps too far sometimes. Vanilla tmux can be unwieldy, but with only a
few modifications it can feel very comfortable.</p>
<p>The most obvious modification is to change the prefix key. This is the key you
need to tap before most tmux keyboard shortcuts, to prevent conflicts with child
processes. By default it's mapped to <code>Ctrl-B</code>. Many recommend mapping it to
<code>Ctrl-A</code>, which matches the prefix key for <a href="https://www.gnu.org/software/screen/">GNU Screen</a>, a much older terminal
multiplexer. I don't recommend this because it conflicts with Vim's number
incrementation. Maybe that's okay because it's not the most common of
keystrokes, but <a href="http://vim.wikia.com/wiki/Unused%5Fkeys"><code>Ctrl-S</code> is free</a>! Given it's just one more key over I think this
binding makes far more sense. Time will tell.</p>
<p>If you're playing around with your config, adding a mapping that calls
<code>source-file</code> with your config as an argument is invaluable so that you can
quickly test out changes. Adding more vi-like pane-selection mappings is useful,
as is more vi-like copy-mode behaviour like explained <a href="https://sanctum.geek.nz/arabesque/vi-mode-in-tmux/">here</a>.  A particularly
great mapping is window reordering. I'm surprised this isn't in more configs
online because it's insanely good! I found it in <a href="https://superuser.com/a/552493">this answer on superuser</a>, but
tweaked it so that it supports repeated keys and forces you to use the prefix
key.</p>
<pre><code class="language-tmux" data-lang="tmux">bind-key -r S-Left swap-window -t -
bind-key -r S-Right swap-window -t +
</code></pre><p>Otherwise I try to keep other mappings and remappings to a minimum. Many suggest
to remap the window split commands, like remapping a horizontal split from
<code>&lt;prefix&gt;%</code> to <code>&lt;prefix&gt;|</code>, but I find the visual association unnecessary. I've
only been using tmux for a week and have already gotten used to the default.</p>
<p>In a similar vain, I've kept my status bar minimal. It only contains the session
name and the window list. The current window is highlighted and activity in an
inactive window causes the window index display to change colour. It's clean and
out of the way.</p>
<p>The remainder of my config is specifying consistent colours across the status
bar, pane borders, pane information display and clock. Yes, you can press
<code>&lt;prefix&gt; T</code> to get a full-pane clock display! Another reason it doesn't need to
be in the status bar. Enabling <code>renumber-windows</code> is useful if you have large
sessions with short-lived windows. Changing <code>base-index</code> and <code>pane-base-index</code>
to 1 will make it easier to select them with the number keys, rather than
reaching over for <code>0</code>. I've also set the status bar to appear to top because it
can get pretty cluttered down south when vim is also running.</p>
<h2 id="notice-your-habits">Notice your habits</h2>
<p>Keegan Lowenstein wrote a great <a href="https://blog.bugsnag.com/tmux-and-vim/">blog post</a> on Vim integration with tmux. One the
tools he mentioned is <a href="https://github.com/benmills/vimux">vimux</a>, a Vim plugin that allows you to interact with tmux
from inside Vim. This is next on my list of things to play around with. Vim
already has pretty good shell integration, so I'm sceptical, but his example of
the edit-test-repeat loop and how vimux can help with it is pretty convincing.</p>
<p>If you have a similar workflow that is as common, then by all means you should
make it easier to perform. Tools like vimux can help, as can a better
understanding of tmux. Maybe down the road you notice it would be great to
always have on-screen vision on the output of a particular shell process. Tmux
supports this out of the box and you can easily add that to the status bar.</p>
<p>The week wasn't entirely smooth sailing. I've had trouble getting user-defined
options working. These are options that are prefixed with <code>@</code>. I want to keep my
colour scheme consistent in the file so declaring a custom option would be
ideal. It could also be interesting to only show the status bar when the prefix
key is pressed, and make it vanish again when the subsequent key is
pressed. This seems pretty difficult with tmux alone, but I'm sure it's possible
through shell scripting.  After all, the status bar can be toggled in this way.</p>
<p>It can pay off in the long run to keep the configs for new tools small to begin
with. Only use what you know will give you benefit and add more as time goes by
and you discover new things. It's much easier to maintain when you've added
every line for a reason!</p>
<p><em>Closing tip</em>: use <code>&lt;prefix&gt; Z</code>! This <em>zooms</em> the active pane to take up the
full size of its containing window. Use the same binding to revert the original
layout. It's great for temporarily getting the big picture if you're working on
a smaller screen.</p>
]]></content></item><item><title>This Week I Discovered: Vim Minimalism</title><link>https://kwyse.github.io/posts/twid-vim-minimalism/</link><pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/twid-vim-minimalism/</guid><description>Last month marked four years since I started my dotfiles repository on GitHub. Now it's in a state of disrepair! I had no idea that I hadn't made a single commit to it throughout 2017. I did though, I just didn't push them. There are local changes on every computer that I work with. Some were the results of experiments I later forgot about and others were quickly-needed hacks that I didn't find time to refactor and stabilise.</description><content type="html"><![CDATA[<p>Last month marked four years since I started my <a href="https://github.com/kwyse/dotfiles">dotfiles</a> repository on GitHub.
Now it's in a state of disrepair! I had no idea that I hadn't made a single
commit to it throughout 2017. I did though, I just didn't push them. There are
local changes on every computer that I work with. Some were the results of
experiments I later forgot about and others were quickly-needed hacks that I
didn't find time to refactor and stabilise.  Now it's time to clean it up.</p>
<p>I came across a <a href="https://www.youtube.com/watch?v=XA2WjJbmmoM">video</a> which explains some lesser-known Vim tips. With just a few
lines of Vimscript, you can moderately match the functionality of some common
Vim plugins.</p>
<p>The first tip is to add <code>**</code> to the search path when using Vim's <code>find</code>
command. This gives behaviour similar to a fuzzy finder but with the built-in,
kind-of awkward-for-long-lists wildmenu. I think this has to potential to be
used instead of a fuzzy finder for small code bases that have short-ish file
names. If you're working with a monolith, maybe not.  Fuzzy finding with the
first letter of each camel-cased word in a class name can be really helpful for
monoliths.</p>
<p>The second tip is explaining Vim's built in <em>ctags</em> integration for
jump-to-definition functionality. Code completion is covered separately in the
video but ctags supports this as well. Unfortunately it seems like most effort
in this space is now being dedicated towards <a href="https://microsoft.github.io/language-server-protocol/">language server protocols</a>. The <a href="https://github.com/rust-lang-nursery/rls">Rust
Language Server</a> is an implementation of the protocol and has <a href="https://www.ncameron.org/blog/what-the-rls-can-do/">support</a> from the
core team.</p>
<p>Build integration is explained with Vim's <code>makeprg</code> configuration variable. This
is the external program called when invoking <code>make</code> from inside Vim. For simple
cases it's perfectly sufficient. The video goes on further to explain how to
integrate marked errors with Vim's quickfix list so that you can easily navigate
them. In general, this needs to be done on a per-language basis, so I agree with
the speaker that plugins are useful here.</p>
<p>Personally, I've never seen the need for snippets. Maybe I'm just using the
wrong languages.</p>
<p>That leaves file browsing. The speaker talks about <em>netrw</em>, Vim's built-in file
browser. Unfortunately, netrw isn't the most stable piece of software.  <a href="https://www.reddit.com/r/vim/comments/22ztqp/why%5Fdoes%5Fnerdtree%5Fexist%5Fwhats%5Fwrong%5Fwith%5Fnetrw/?st=jcetivby&amp;sh=95ada33e">This</a>
Reddit thread talks about some of the alternatives.  <a href="https://github.com/scrooloose/nerdtree">NERDTree</a> is the most
frequently recommended and the most popular &ldquo;project draw&rdquo;-type plugin.  Such
plugins are an ongoing point of contention within the community, with those that
want to make Vim IDE-like and those that say this is unidiomatic and that Vim
should stick to traditional Unix philosophy: do one thing and do it well. For
Vim, that's editing text. As such, simpler alternatives have been created like
<a href="https://github.com/jeetsukumaran/vim-filebeagle">FileBeagle</a> and <a href="https://github.com/justinmk/vim-dirvish">vim-dirvish</a>.</p>
<h2 id="deciding-what-vim-should-be">Deciding what Vim should be</h2>
<p>If there's <a href="https://josephg.com/blog/3-tribes/">three camps of coders</a>, you can bet there's be multiple views on
idiomatic Vim configurations. Arguing about it online is all well and good to
see different opinions and help you decide which camp you sit in. Vim, along
with its plugin ecosystem, is completely open and that means you can configure
out however you please.</p>
<p>For me, I want Vim to be <em>fast</em>. Thinking back on my usage in the last four
years, I'm comfortable falling back into the terminal. I used <em>very</em> few of the
plugins I had installed to their full potential. And yet, seeing that delay when
opening Vim over and over again <em>would</em> agitate me.</p>
<p>Realising that removes the need for many plugins. Most of us probably use Git
everyday. Tim Pope's <a href="https://github.com/tpope/vim-fugitive">fugitive.vim</a> tops many &ldquo;must-have Vim plugins&rdquo; lists. The
problem is that the time you spend interacting with Git is not that much
compared to the time spent reading and writing code. I interact with Git a few
times per day on average, maybe ten times, but I'm editing code far more
frequently than that.  Enabling it inside Vim seems unnecessary. Sure it might
be helpful to see which branch you're on, but do you change branches that
frequently?  It could be useful to see the modifications in the sidebar like
<a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a> offers, but how often do you actually make decisions based on
that?</p>
<p>Instead, I think it makes more sense to use a dedicated tool like <a href="https://jonas.github.io/tig/">tig</a>. You can
think of this like the mode-based philosophy of Vim, but more meta. We were in
<em>editing</em> mode and now we're in <em>review</em> mode, where we check our changes before
committing them. This is the workflow I was already using without realising it,
so it's a natural fit.</p>
<p>We can take this further. During the orientation of learning a new
codebase, exploring with a file browser is useful. Once you're familiar
with the codebase though, you'll often just want to jump to specific
files. You have a mental map of the codebase in your head. Why include a
file browser then? Instead, we can again use an external tool like
<a href="https://ranger.github.io/">ranger</a>!</p>
<p>It's likely there are other phases in our workflows that we can delegate to a
specialised tool. Both tig and ranger have Vim integrations available and
delegating to them when they are needed feels natural. It keeps Vim snappy and
focussed on what it's good at.</p>
<h2 id="less-plugins-more-configuration">Less plugins, more configuration</h2>
<p>Plugins are designed to be applicable to as many people as possible.  They will
support use cases you may never need. Hence I am also trying to instead take
ideas from the plugins I like and configure them inside Vim myself. It's a great
way to learn Vimscript, offers me tailored control on the behaviour, and makes
sure that every time I benchmark Vim's startup time I know why it's behaving the
way it is.</p>
<p><a href="https://pragprog.com/book/modvim/modern-vim">Modern Vim</a> is due for release next month. I <em>loved</em> Drew Neil's previous book,
<a href="https://pragprog.com/book/dnvim2/practical-vim-second-edition">Practical Vim</a>. Having read it when I'd been using Vim for only a few months,
much of it went over my head, but it convinced me that the methodology works. I
will tinker with my configuration for now in the hopes that Modern Vim will soon
enlighten me much like Practical Vim did before it.</p>
]]></content></item><item><title>Hugo, Two Weeks In</title><link>https://kwyse.github.io/posts/hugo-two-weeks-in/</link><pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/hugo-two-weeks-in/</guid><description>My last post about Hugo focused on getting it set up. It finished with a few ideas on improvements. Maybe you've noticed a few implemented since then =]
One-liner improvements Some of these were very simple to add. The theme I'm using, Minimo, supports adding a reading time to posts with one addition to config.toml.
showReadingTime = true It's a small addition yet adds noted value for the reader.
The next change instead provides insight for the sight maintainer:</description><content type="html"><![CDATA[<p>My <a href="/posts/hail-hugo">last post</a> about Hugo focused on getting it set up. It finished with a few
ideas on improvements. Maybe you've noticed a few implemented since then =]</p>
<h2 id="one-liner-improvements">One-liner improvements</h2>
<p>Some of these were very simple to add. The theme I'm using, <a href="https://minimo.netlify.com/">Minimo</a>, supports
adding a reading time to posts with one addition to <code>config.toml</code>.</p>
<pre><code class="language-nil" data-lang="nil">showReadingTime = true
</code></pre><p>It's a small addition yet adds noted value for the reader.</p>
<p>The next change instead provides insight for the sight maintainer:</p>
<pre><code class="language-nil" data-lang="nil">googleAnalytics = &quot;[your Google Analytics tracking ID]&quot;
</code></pre><p>Once your site starts getting some traffic, <a href="https://analytics.google.com/">Google Analytics</a> can help you create
more targeted content.</p>
<p>I've also enabled my RSS feed to display the full contents of an article rather
than just the summary. You can do that by overriding the default <code>rss.xml</code> file
(add your own <code>layouts/_default/rss.xml</code> and it will take precedence) and
changing</p>
<pre><code class="language-nil" data-lang="nil">&lt;description&gt;{{ .Summary | html }}&lt;/description&gt;
</code></pre><p>to</p>
<pre><code class="language-nil" data-lang="nil">&lt;description&gt;{{ .Content | html }}&lt;/description&gt;
</code></pre><p>Kudos to Brian Wisti for his <a href="https://randomgeekery.org/2017/09/15/full-content-hugo-feeds/">post</a> on this technique.</p>
<p>The final quick addition is taxonomies. I've started a series called <em>This Week
I Discovered</em> where, each week, I plan to discuss something cool I found in the
last seven days. These posts should naturally be grouped together. Hugo calls
such a grouping a <a href="https://gohugo.io/content-management/taxonomies/"><em>taxonomy</em></a>. Two taxonomies are provided for us: <em>categories</em>
and <em>tags</em>, but we can easily add our own as well, such as a <em>series</em> taxonomy.</p>
<p>Enabling a taxonomy requires the name of it to be included in at least one
post's front matter:</p>
<pre><code class="language-nil" data-lang="nil">series: [&quot;This Week I Discovered&quot;]
</code></pre><h2 id="somewhat-effortful-improvements">Somewhat effortful improvements</h2>
<p>Adding a comments section could have been easy. Hugo supports <a href="https://disqus.com/">Disqus</a> comments
out of the box. In your <code>config.toml</code>, simply add:</p>
<pre><code class="language-nil" data-lang="nil">disqusShortname = &quot;[your Disqus short name]&quot;
</code></pre><p>I ended up going this route, but there are alternatives.  <a href="https://staticman.net/">Staticman</a>, for
example, doesn't require the comments to be stored by a third-party. It's much
more appropriate for a static-content site. Staticman listens for incoming
<code>POST</code> requests that such a site would generate and then creates a pull request
to the repository with the comment contents. It can be configured to merge the
PRs immediately or delegate to the repository owner, which provides comment
moderation. It's a really nice idea.</p>
<p>The problem is that it the comments form does not look that great in Minimo. I
spent some time tweaking it but form design is not my forte.  I'd like to move
to Staticman in the future if a designer will alleviate me of that burden ;)
Suffice to say, the comments section took some time to investigate and play
around with.</p>
<p>The biggest pain point was TLS, and it could have been so easy! The lesson here
is to always read the documentation. Each day, I would spend a bit of time
trying to find out why my site was so slow to initially load. The first
incarnation of this site didn't have this problem, and was hosted on the same
DigitalOcean setup, so I ruled that out. It seemed like a DNS lookup issue,
because performance was good once the site was loaded, but I couldn't tell if
this was on Namecheap's side or something I had misconfigured with Nanobox given
it was my first time using it.</p>
<p>The investigation led me discovering that <a href="https://blog.josephscott.org/2011/10/14/timing-details-with-curl/">cURL can provide timings</a>! There's also
an <a href="https://github.com/mat/dotfiles/blob/master/bin/curlt">awesome little script</a> to save you from having to type out the long
version. It confirmed immediately that the issue was indeed DNS lookup. I took a
closer look at my Namecheap DNS configuration and found that I was redirecting
traffic to the TLS version of the site. Nginx, running inside my Nanobox, wasn't
playing nice with this setup. Then I took another look at the <a href="https://github.com/nanobox-io/nanobox-engine-static/blob/master/README.md">README</a> for the
Nanobox static site engine and saw that forcing HTTPS was supported at this
level!</p>
<pre><code class="language-nil" data-lang="nil">force_https: true
</code></pre><p>Well I felt silly, but now the whole site is TLS enabled and loading within a
few hundred milliseconds. Much better than the ~75 seconds it was previously
taking!</p>
<p>The final task, and arguably the one with the biggest benefit, was to set up
automated deployments when pushing to GitHub. If you have a Travis CI account
and continuous integration enabled for the repository, simply add a
<code>.travis.yml</code> file with the following:</p>
<pre><code class="language-nil" data-lang="nil">sudo: required
install: sudo bash -c &quot;$(curl -fsSL https://s3.amazonaws.com/tools.nanobox.io/bootstrap/ci.sh)&quot;

script:
  - nanobox remote add [your Nanobox project name]
  - nanobox deploy
</code></pre><p>Travis CI configuration files can be customised much more than this, but it
suffices for the simple use case. Now the site will automatically deploy itself
whenever pushing!</p>
<h2 id="endless-possibilities">Endless possibilities</h2>
<p>One can never be truly done with a project like this. Outside of creating
content, there's always ways to improve the site itself. I think the main points
are covered now, but hopefully this is only the start of side projects for this
side project.</p>
]]></content></item><item><title>This Week I Discovered: RSS</title><link>https://kwyse.github.io/posts/twid-rss/</link><pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/twid-rss/</guid><description>This is actually a rediscovery. A colleague was telling me about Feedly back in 2013 when I was scrambling around in my first job. I had narrower interests that were sufficiently sated with GameTrailers.com and other video-heavy publications. Times have changed! My interests are broader. Commutes (often without Internet access) are the best times to peruse news. I want to give priority to news targeted at my interests rather than news discovery.</description><content type="html"><![CDATA[<p>This is actually a rediscovery. A colleague was telling me about <a href="https://feedly.com/">Feedly</a> back in
2013 when I was scrambling around in my first job. I had narrower interests that
were sufficiently sated with GameTrailers.com and other video-heavy
publications. Times have changed! My interests are broader. Commutes (often
without Internet access) are the best times to peruse news. I want to give
priority to news targeted at my interests rather than news discovery. And given
the additional web presence you have when you start a blog, I'm keener to see
what others are up to as well =]</p>
<p>RSS is perfect for all of this. It's a web syndication format that the vast
majority of content publishers and blogs support. They provide a URL that gives
access to a feed of their content in a client of your choice.</p>
<p>Most clients these days are smart enough to detect the content format.  For
example, Feedly doubles as a podcast player. CLI RSS readers like <a href="https://newsboat.org/">Newsboat</a> and
<a href="https://codezen.org/canto-ng/">Canto</a> facilitate opening an article in a browser for content that contains more
than plain text. Most are very flexible, supporting things like keyword filters
and changing the order feeds are displayed.</p>
<p>The key thing is that you control the content you want to see. I went through
the phase of using social media for updates. The feeds are endless. The content
is tailored to you based on some initial preferences you supply and then the
algorithm takes over. Most articles will at least contain something
interesting. In a few, you may learn something of value. But it's not efficient.</p>
<p>I moved on Hacker News next, which I know <em>many</em> people find perfectly
sufficient, but it's also an endless feed. I found myself sifting down into the
triple digits on some commutes trying to find something to distract me. It made
me realise that I was spending as much time, if not more, searching for content
rather than learning from it.</p>
<p>Now I have a just a few feeds set up in Feedly. I can fine tune it to sources
that I find interesting. That's an ongoing process and one that is far from
being optimal, but it means that when I check Feedly there's a much higher
chance I'll learn rather than sift. I've chosen feeds that post a maximum of a
few times per day so that I can look forward to a steady stream of new content
every morning without getting overwhelmed.  This may become too frequent as I
discover more feeds, and I'll readjust then if necessary. Having that level of
control is a real asset. Once I've read through everything, I feel confident
that I've &ldquo;caught up&rdquo;. I can then focus on other things, like creating content
myself!</p>
<p>It's not a perfect setup. There are topics out there that could be my next
passion but are completely off my radar, hidden on the other side of the
Internet. Locating such topics is hard, but prove incredibly fruitful when you
do! For that reason, I still check Hacker News occasionally, but limit myself to
the top stories. There's feeds specifically tailored for top Hacker News stories
that could prove to be a great compromise.</p>
<p>I'm still on the hunt for feeds. Some that have proved worthwhile subscriptions
in the last week are the <a href="https://blog.trello.com/">Trello blog</a>, various <a href="https://www.gamasutra.com/blogs/">Gamasutra blogs</a>, <a href="https://opensource.com/">Opensource.com</a>
and, of course, <a href="https://this-week-in-rust.org/">This Week in Rust</a>! Here's to discovering what else is out there.</p>
]]></content></item><item><title>Grokking Entity-Component-Systems</title><link>https://kwyse.github.io/posts/grokking-entity-component-systems/</link><pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/grokking-entity-component-systems/</guid><description>I've spent many commutes in the last few months learning the intricacies of Specs, an entity-component-system (ECS) written in Rust and, to be more broad, ECSs in general. ECSs have proved to be a much deeper topic than I had initially anticipated. Now I'd like to explain my findings in order to solidify that knowledge.
ECSs are a decoupling pattern. They're most frequently seen in game development where we often have many similar yet distinct types of game objects.</description><content type="html"><![CDATA[<p>I've spent many commutes in the last few months learning the intricacies of
<a href="https://github.com/slide-rs/specs">Specs</a>, an entity-component-system (ECS) written in Rust and, to be more broad,
ECSs in general. ECSs have proved to be a much deeper topic than I had initially
anticipated. Now I'd like to explain my findings in order to solidify that
knowledge.</p>
<p>ECSs are a decoupling pattern. They're most frequently seen in game development
where we often have many similar yet distinct types of <em>game objects</em>. Games are
effectively giant state machines and it can be hard to create an object-oriented
hierarchy that represents this. ECSs instead implore the use of data-driven
programming, with components representing the data to be acted on, systems
acting on those components to mutate them, and entities linking components for
each game object.</p>
<h2 id="high-level-design">High level design</h2>
<p>There isn't clear consensus on <em>how</em> one should go about building an
ECS. They're enough of a high-level concept that implementation details can be
optimised to a particular use case. But there are clear themes, which I've
included here, as well as design decisions that I found particularly
interesting.</p>
<p>The first revelation is that entities needn't be fat. Entities represent a game
object, like the player. You may think a <em>player</em> object must be complex,
composed of many other objects like hardware input, a hit box for collision
detection, and a sprite. Not so. Instead it can be just a unique ID.</p>
<p>As for these other objects that compose a player, they are components.  Ideally,
components should only contain primitive types. It is vital that we are able to
retrieve the component instance for a particular component and for a particular
entity efficiently (<em>O(1)</em>), because these operations will make up most of the
game loop, as you'll see shortly. We accomplish the first part by storing each
type of component in a different collection. For example, all positions for all
entities will be stored in one collection and all sprites will be stored in
another. How the second requirement is fulfilled depends on the underlying
storage medium.</p>
<p>For a map data structure, it's simple because lookup for a given ID (the entity
ID) will always be amortized to constant time complexity. But maps have
overhead. For example, the hashing function must be ran on every insertion and
lookup for hash maps.</p>
<p>For arrays, we could insert the entity at an index that matches its ID.  The
problem here is that the array must be as large as the largest entity ID. This
brings a distinction between <em>hot</em> components which we'll likely have many of,
like entity positions, and <em>cold</em> components which we may only have a few of,
like the keyboard input context. In general, arrays are a better storage medium
for hot components and maps are better for cold components, though other data
structures exist and may suit your particular use case more. This binary
division may also not create enough granularity for your use case.</p>
<p>Efficient lookup is vital because we will need to iterate through these
collections in our systems. We could have a <em>MovementSystem</em> that adjusts an
entity's position based on its velocity. This system must iterate through all
components in the velocities collection (probably an array because we would
expect there to be many entities that have a velocity component) and join on the
indexes that also exist in the positions collection. Ideally the API should
seamlessly expose this join, because it's generic across all systems and all
components. All the system cares about is being provided components that it
needs to act upon that belong to the same entity. This keeps the system
small. It should only include the logic to mutate a position given a velocity.</p>
<p>Structuring the code this way gives a clear decoupling benefit. What may not be
as clear is the performance benefit. Remember that components should ideally
only contain primitive types, and appropriately abstracted components should be
as small as possible. This means their collections should also be small in terms
of memory. We can then take advantage of the CPU caches. If our position
component is simply a coordinate with two 64-bit floating point components, an
<em>x</em> component and a <em>y</em> component, we could have as many as a few thousand
position components and still fit comfortably in the L1 cache, not to mention
the L2 and L3 caches for more realistic collection sizes.</p>
<h2 id="a-rust-implementation-with-specs">A Rust implementation with Specs</h2>
<p>Specs relies on another crate called <a href="https://github.com/slide-rs/shred"><code>shred</code></a>, used for shared resource
dispatching. This in turn relies on a crate called <a href="https://github.com/chris-morgan/mopa"><code>mopa</code></a>. Let's start there and
work our way backwards.</p>
<p><code>mopa</code>, or <em>My Own Personal Any</em>, allows you to covert an object that implements
a certain trait into the concrete object, known as downcasting. This emulates
downcasting on the <a href="https://doc.rust-lang.org/std/any/trait.Any.html"><code>Any</code></a> trait in the Rust standard library.</p>
<p><code>shred</code> uses this for storing arbitrarily-typed structs. What we were calling a
component above, <code>shred</code> calls a <em>resource</em>. Its <code>Resource</code> trait is implemented
for all types that adhere to Rust's borrowing model, all those that implement
<code>Any + Send + Sync</code>, but this <code>Any</code> is <code>mopa</code>'s <code>Any</code>, not the standard library
<code>Any</code>, which means we can only downcast our own <code>Resource</code> s, but that's all we
need. You can see this in the <a href="https://github.com/slide-rs/shred/blob/master/src/res/mod.rs"><code>res</code></a> module of <code>shred</code>.</p>
<p>A neat optimisation is that <code>Resource</code> s are stored in a <code>FnvHashMap</code>.  This uses
the <em>FNV</em> hashing algorithm instead of the default <em>SipHash</em> algorithm. The
former is faster when using smaller keys, but is less secure. This is perfectly
acceptable in this instance because our keys are just unsigned integers (wrapped
in <a href="https://doc.rust-lang.org/std/any/struct.TypeId.html"><code>std::any::TypeId</code></a>, itself wrapped in <code>shred</code>'s <code>ResourceId</code>). Benchmarks can
be found <a href="http://cglab.ca/~abeinges/blah/hash-rs/">here</a>.</p>
<p><code>shred</code> revolves around its <code>Fetch</code> and <code>FetchMut</code> structs. These are
effectively wrappers for <a href="https://doc.rust-lang.org/std/cell/struct.Ref.html"><code>Ref</code></a> and <a href="https://doc.rust-lang.org/std/cell/struct.RefMut.html"><code>RefMut</code></a> from the standard library,
respectively. <code>Ref</code> and <code>RefMut</code> are in turn the wrappers for objects contained
within a <a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell</code></a> when it is <em>borrowed</em>.</p>
<p>=RefCell=s are used when we want to enforce Rust's borrowing rules at runtime
rather than compile time. These rules, at their core, are that we can only have
one mutable reference to an object at a time, or multiple immutable references
to it. As such, we can have only have one <code>FetchMut</code> reference to a resource at
a time, or multiple <code>Fetch</code> ones.  When we want to read a component, we specify
a system with a <code>Fetch</code> of that same type. We do the same for components we want
to modify, but use <code>FetchMut</code> for those instead.</p>
<p>A really ergonomic feature of this API is that you declare the components a
system corresponds to with a tuple. This allows you to include as many read or
write resources in a system as you want&hellip;  almost. There's a <a href="https://github.com/slide-rs/shred/blob/master/src/system.rs#L215"><code>hard limit</code></a> of
26, though systems should never reach close to that number in practice.</p>
<p>That's the crux of how <code>shred</code> is working under the hood. Check the project's
<a href="https://github.com/slide-rs/shred/blob/master/README.md">README</a> for example usage.</p>
<p>Specs fine tunes this model specifically for ECSs. Its API uses terminology
that's more familiar. All structs that our systems want to work on must
implement the <code>Component</code> trait. The tuple that defines the components our
systems work on accepts <code>ReadStorage</code> and <code>WriteStorage</code> types instead of
<code>Fetch</code> and <code>FetchMut</code>. It also introduces different storage strategies like
<code>VecStorage</code> and <code>HashMapStorage</code>, with the same nuances described in the
previous section.</p>
<h2 id="demonstration">Demonstration</h2>
<p>Theory only goes so far. We want a result. Let's follow along with the examples
above. We'll create an ECS that modifies an entity's position according to it's
velocity. Rather than just show numbers being affected, let's actually show the
entity moving across the screen. We'll use SDL2 for events, rendering and window
management.</p>
<p>The following application was built with these crates:</p>
<ul>
<li>sdl2 (0.31.0)</li>
<li>specs (0.10.0)</li>
<li>specs-derive (0.1.0)</li>
</ul>
<p>First we declare out components. This includes a sprite component that wraps
SDL2's <code>Rect</code> struct. SDL2 makes it easy to render =Rect=s to screen.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#[</span><span class="cp">derive(Component)</span><span class="cp">]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Position</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="n">x</span>: <span class="kt">f64</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="n">y</span>: <span class="kt">f64</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="cp">#[</span><span class="cp">derive(Component)</span><span class="cp">]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Velocity</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="n">x</span>: <span class="kt">f64</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="n">y</span>: <span class="kt">f64</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="cp">#[</span><span class="cp">derive(Component)</span><span class="cp">]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Sprite</span><span class="p">(</span><span class="n">Rect</span><span class="p">)</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>Then we declare out systems. The first one is to update the position of an
entity given its velocity.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">MovementSystem</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="n">System</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">MovementSystem</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="k">type</span> <span class="nc">SystemData</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="n">Fetch</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="p">,</span><span class="w"> </span><span class="n">Duration</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="n">ReadStorage</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="p">,</span><span class="w"> </span><span class="n">Velocity</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="n">WriteStorage</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="p">,</span><span class="w"> </span><span class="n">Position</span><span class="o">&gt;</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">data</span>: <span class="nc">Self</span>::<span class="n">SystemData</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">dt</span><span class="p">,</span><span class="w"> </span><span class="n">velocities</span><span class="p">,</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">positions</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">data</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">vel</span><span class="p">,</span><span class="w"> </span><span class="n">pos</span><span class="p">)</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="o">&amp;</span><span class="n">velocities</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">positions</span><span class="p">)</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">            </span><span class="n">pos</span><span class="p">.</span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="o">=</span><span class="w"> </span><span class="n">vel</span><span class="p">.</span><span class="n">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">dt</span><span class="p">.</span><span class="n">subsec_nanos</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">f64</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mf">1_000_000_000.0</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">            </span><span class="n">pos</span><span class="p">.</span><span class="n">y</span><span class="w"> </span><span class="o">+</span><span class="o">=</span><span class="w"> </span><span class="n">vel</span><span class="p">.</span><span class="n">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">dt</span><span class="p">.</span><span class="n">subsec_nanos</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">f64</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mf">1_000_000_000.0</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>This matches the logic described prior. The only difference is that we also
include a <em>delta time</em> input value. This represents the amount of time that has
passed from one frame to the next. We need this because we don't have control on
exactly when our function will be called again. We can aim for a target, say, 60
times per second, but we'll never hit that exactly. It may only be a few
milliseconds off here and there, but that adds up the longer the game is
running. Pretty quickly we would have vastly inaccurate positions if you don't
scale them like this!  <a href="https://gafferongames.com/post/integration%5Fbasics/">Integration Basics</a> by Glenn Fiedler explains why this
happens.</p>
<p>The other system we need converts logical world coordinates to screen
coordinates.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">RenderSystem</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="n">System</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">RenderSystem</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="k">type</span> <span class="nc">SystemData</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">ReadStorage</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="p">,</span><span class="w"> </span><span class="n">Position</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">WriteStorage</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="p">,</span><span class="w"> </span><span class="n">Sprite</span><span class="o">&gt;</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">data</span>: <span class="nc">Self</span>::<span class="n">SystemData</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">positions</span><span class="p">,</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">sprites</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">data</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">pos</span><span class="p">,</span><span class="w"> </span><span class="n">sprite</span><span class="p">)</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="o">&amp;</span><span class="n">positions</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">sprites</span><span class="p">)</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">            </span><span class="n">sprite</span><span class="p">.</span><span class="mf">0.</span><span class="n">set_x</span><span class="p">(</span><span class="p">(</span><span class="n">pos</span><span class="p">.</span><span class="n">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">PIXELS_PER_UNIT</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">i32</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">            </span><span class="n">sprite</span><span class="p">.</span><span class="mf">0.</span><span class="n">set_y</span><span class="p">(</span><span class="p">(</span><span class="n">pos</span><span class="p">.</span><span class="n">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">PIXELS_PER_UNIT</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">i32</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Using logical world units for an entity's position frees us from the details of
our rendering process. When it comes to rendering, we simply scale the position
by a constant factor to get screen coordinates, which is used by our sprite for
rendering.</p>
<p>Almost there. We now need to hook this all up to the <code>World</code>, which manages the
entities.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">world</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">World</span>::<span class="n">new</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="n">world</span><span class="p">.</span><span class="n">add_resource</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="n">world</span><span class="p">.</span><span class="n">register</span>::<span class="o">&lt;</span><span class="n">Position</span><span class="o">&gt;</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="n">world</span><span class="p">.</span><span class="n">register</span>::<span class="o">&lt;</span><span class="n">Velocity</span><span class="o">&gt;</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="n">world</span><span class="p">.</span><span class="n">register</span>::<span class="o">&lt;</span><span class="n">Sprite</span><span class="o">&gt;</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">initial_pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Position</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">x</span>: <span class="mf">2.0</span><span class="p">,</span><span class="w"> </span><span class="n">y</span>: <span class="mf">2.0</span><span class="w"> </span><span class="p">}</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">initial_vel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Velocity</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">x</span>: <span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="n">y</span>: <span class="mf">0.0</span><span class="w"> </span><span class="p">}</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">sprite</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sprite</span><span class="p">(</span><span class="n">Rect</span>::<span class="n">new</span><span class="p">(</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="p">(</span><span class="n">initial_pos</span><span class="p">.</span><span class="n">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">PIXELS_PER_UNIT</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">i32</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="p">(</span><span class="n">initial_pos</span><span class="p">.</span><span class="n">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">PIXELS_PER_UNIT</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">i32</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="mi">32</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="mi">32</span><span class="w">
</span><span class="w"></span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="n">world</span><span class="p">.</span><span class="n">create_entity</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">.</span><span class="n">with</span><span class="p">(</span><span class="n">initial_pos</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">.</span><span class="n">with</span><span class="p">(</span><span class="n">initial_vel</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">.</span><span class="n">with</span><span class="p">(</span><span class="n">sprite</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">.</span><span class="n">build</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">dispatcher</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">DispatcherBuilder</span>::<span class="n">new</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">MovementSystem</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;movement_system&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="p">[</span><span class="p">]</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">RenderSystem</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;render_system&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="p">[</span><span class="s">&#34;movement_system&#34;</span><span class="p">]</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">.</span><span class="n">build</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>It's then just one line to update all of our entities.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">dispatcher</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">world</span><span class="p">.</span><span class="n">res</span><span class="p">)</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>Of course, we need some additional infrastructure around this. The above line
should belong in the application run loop. That loop should also contain input
handling and rendering to a hardware context.</p>
<p>You may be able to implement those as systems as well, but at some point you
will hit a boundary where the objects are too large. This will often be with
input and output. Rendering to screen is a complex process, and should probably
be done outside of the ECS. This demonstrates that ECSs are not appropriate for
the entire application, particularly on the boundaries, but still very useful
for internal logic that we have full control over.</p>
<p>If you would like to learn the details of run loops, check out <a href="https://gafferongames.com/post/fix%5Fyour%5Ftimestep/">Fix Your
Timestep!</a> It's probably the most quoted article on the subject and does a fine
job explaining the various approaches.</p>
<h2 id="results">Results</h2>
<p><a href="https://gist.github.com/kwyse/1d6be3de1c95d05502e10b6dba3cc6be">Gist of the source code</a></p>
<p>The above includes the simplest kind of run loop with a fixed time step of
1/60th of a second. The results are hopefully a white square moving across a
black abyss.</p>
<figure>
    <img src="/images/grokking_ecs_result.gif"/> 
</figure>

<p>There are many ways to improve this. You could use a more sophisticated run loop
that can handle variable time steps. Or you could use the parallel iterators
offered by Specs to improve performance. It's probably a good idea to better
define the boundaries of our ECS explicitly as well. Modularise all of that and
you have the beginnings of a game!</p>
]]></content></item><item><title>This Week I Discovered: OpenMW</title><link>https://kwyse.github.io/posts/twid-open-mw/</link><pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/twid-open-mw/</guid><description>Two weeks back I installed Gentoo with the intention to use it as my primary desktop. Naturally I need games to play. My go-to benchmark for the state of Linux gaming has always been the Wine Application Database, so I checked it for a game I knew I could sink countless hours into.
Well it turns out the results for Oblivion are not too promising, especially for Steam. Maybe Morrowind fairs better?</description><content type="html"><![CDATA[<p>Two weeks back I installed Gentoo with the intention to use it as my primary
desktop. Naturally I need games to play. My go-to benchmark for the state of
Linux gaming has always been the <a href="https://appdb.winehq.org/">Wine Application Database</a>, so I checked it for
a game I knew I could sink countless hours into.</p>
<p>Well it turns out the <a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=3150">results</a> for Oblivion are not too promising, especially for
Steam. Maybe Morrowind fairs better?  <a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=1015">Yes</a>, but there are still issues. But the
description holds a gem: a Linux-native alternative called <a href="https://openmw.org/en/">OpenMW</a>.</p>
<p>If you want a video summary, check out <a href="https://www.youtube.com/watch?v=g2PKBD0D9Gw">the FAQ video</a>. It's quite dated but still
shown prominently on the official site and gives a good overview of the project.</p>
<p>Essentially, OpenMW is an open source reimplementation of the game engine for
Morrowind. It's not a different game because it still relies on assets from the
original. You can't <em>play</em> Morrowind through it without actually owning a copy
of Morrowind, or at the very least having access to the game's data files.</p>
<h2 id="trying-it-out">Trying it out</h2>
<p>A TES game running natively on Linux? Sign me up. It even has an official Gentoo
<a href="https://packages.gentoo.org/packages/games-engines/openmw">ebuild</a>!  Getting it running was remarkably simple. The package includes a wizard
that will guide you through retrieving the data files from the original game. I
have a physical copy but Steam and GOG versions are also supported. It launched
without a hitch.</p>
<p>Playing it was a different story&hellip; Straight of the boat, I was hitting between
four and ten FPS. Of course it wouldn't be that easy! I couldn't find anything
Gentoo-specific but the general consensus online was to make sure that your GPU
drivers were up to date. I had only installed my OS in the last two weeks so I
knew that couldn't have been the issue.</p>
<p>Turns out it was! OpenMW doesn't seem to play nice with the <a href="https://wiki.gentoo.org/wiki/Nouveau"><code>nouveau</code></a>
drivers. These are open source NVIDIA drivers that are installed by default when
running through the Gentoo handbook. Gentoo has a <a href="https://wiki.gentoo.org/wiki/NVidia/nvidia-drivers">guide</a> on replacing the
<code>nouveau</code> drivers with the proprietary <code>nvidia</code> ones.</p>
<p>After rebuilding my kernel and a few package builds (and rebuilds) later, I had
booted into a new <code>nvidia</code>-driven X session. Everything seemed to be working
except for when I did the test the guide recommends: running <code>glxinfo</code>, which
kept failing. This command is meant to say that direct rendering is
enabled. Guess that means it's not enabled? Fortunately there's a
troubleshooting section for that issue.  You need to disable the <code>Direct Rendering Manager</code> in the kernel. After doing that and rebuilding the kernel,
which took quite a while considering only one option was disabled, a lot of
warnings came up. The advice online was to ensure that the <code>Direct Rendering Manager</code> was enabled&hellip; :(</p>
<p>Despite that, I pushed on and tried OpenMW again. Lo and behold 280 FPS!  That
will do.</p>
<h2 id="new-toys">New toys</h2>
<p>Everything seems to be running smoothly despite those warnings, but time will
tell how long that lasts. At least it always teaches you something ;)</p>
<p>OpenMW is still not at v1 yet but it's a very mature project. It's also not the
only project of this nature. Some others include:</p>
<ul>
<li><a href="https://openrct2.org/">OpenRCT2</a> - for RollerCoaster Tycoon 2</li>
<li><a href="https://www.openttd.org/en/">OpenTTD</a> - for Transport Tycoon Deluxe</li>
<li><a href="http://openage.sft.mx/">openage</a> - for Age of Empires</li>
<li><a href="http://www.openra.net/">OpenRA</a> - for Command &amp; Conquer</li>
</ul>
<p>Many years of my childhood were spent with RCT and RCT2 so I couldn't help but
try out OpenRCT2. Like OpenMW, it has an official Gentoo <a href="https://packages.gentoo.org/packages/games-simulation/openrct2">package</a> and a <a href="https://openrct2.website/getting-started/">getting
started</a> guide that will set you up. Ten minutes later I was back in Magic
Mountain, but with a day and night cycle! As a bonus, there's an <a href="https://github.com/OpenRCT2/OpenRCT2/wiki/Loading-RCT1-scenarios-and-data">option</a> to point
to RCT data files and play scenarios from the original game.</p>
<p>The sentiment behind these projects is beautiful. Not only do they allow us to
preserve these wonderful games and keep them playable for everyone, but they
open them up to younger players by adding features that are simply expected
today, like widescreen support. Given their timeless gameplay, I expect that
they will always have a community of players, and that is a very good thing.</p>
]]></content></item><item><title>Hail, Hugo!</title><link>https://kwyse.github.io/posts/hail-hugo/</link><pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate><guid>https://kwyse.github.io/posts/hail-hugo/</guid><description>One of my goals this holiday season was to relaunch my blog. My previous attempt failed because there was too much friction in actually blogging. It was an Iron-backed Rust web app using PostgreSQL and Diesel on a DigitalOcean host behind NGINX. It was my first time using most of these technologies for anything serious. I learnt a lot about them in the course of building that blog but the fifth blog post never saw the light of day.</description><content type="html"><![CDATA[<p>One of my goals this holiday season was to relaunch my blog. My previous attempt
failed because there was too much friction in actually <em>blogging</em>. It was an
<a href="http://ironframework.io/">Iron</a>-backed Rust web app using PostgreSQL and <a href="http://diesel.rs/">Diesel</a> on a DigitalOcean host
behind NGINX. It was my first time using most of these technologies for anything
serious. I learnt a lot about them in the course of building that blog but the
fifth blog post never saw the light of day.  Deployment was too manual and
enhancements were a time sync. Ultimately it became a burden.</p>
<p>Enter static site generators. I know I'm late to the party, but at least I now
comprehend the benefit ;) <a href="https://gohugo.io/">Hugo</a> is one such static site generator that seems
<a href="https://github.com/gohugoio/hugo/stargazers">fairly popular</a>. And I can see why: it is <em>so</em> easy to get something up and
running quickly.  Here I'll show you how to go from running that initial
scaffolding command to hitting [insert your domain name] and seeing it fully
deployed.</p>
<p>One thing of note is exactly how much Hugo balances convention (or opinion)
against configuration. Hugo touts configuration as one of its strengths and this
was an initial draw for me. I try to avoid heavily magic-laden frameworks like
the plague. Sometimes that can go too far, when the desire to build everything
from scratch is strong. So in an effort to find balance, I want to start with
the absolute bare minimum and build up from there. We should not add anything
that doesn't have an explicit and understood purpose. Thus far, Hugo has
accommodated that, so let's begin.</p>
<h2 id="building-the-basics">Building the basics</h2>
<p>Hugo already has a great <a href="https://gohugo.io/getting-started/quick-start/">quick start</a> guide that we'll follow to begin with.</p>
<p>First install Hugo with your package manager of choice.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># OS X buddies</span>
$ brew install hugo

<span class="c1"># Arch compatriots</span>
$ sudo pacman --sync hugo

<span class="c1"># Gentoo and friends</span>
$ sudo layman --add go-overlay
$ sudo emerge --ask www-apps/hugo
</code></pre></div><p>Let's create a skeleton site and add a theme. You can browse available themes
<a href="https://themes.gohugo.io/">here</a>. I'll be using the
<a href="https://minimo.netlify.com/">Minimo</a> theme.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ hugo new site wild-baguette $ <span class="nb">cd</span> wild-baguette $ git init $ git
submodule add https://github.com/MunifTanjim/minimo themes/minimo
</code></pre></div><p>This is <em>all</em> you need for a basic site without any content (yet). Let's pause
here and check out the folder structure.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ tree -I minimo <span class="c1"># ignore the theme directory</span>
.
├── archetypes
│   └── default.md
├── config.toml
├── content
├── data
├── layouts
├── static
└── themes
</code></pre></div><p>Excluding the theme, there's only two files! We'll cover <code>archtype=s in a moment when we add some content, but for now let's open up =config.toml</code>. You will
likely need to add options specific to the theme you chose. Most importantly,
actually set the theme with the <code>theme</code> key! You can find out relevant options
for the Minimo theme on <a href="https://github.com/kwyse/personal-website/blob/b00c1f66a4a30f260347a8507d479f0c9fde36f9/config.toml">this commit</a> I made for this site. Minimo has its own
comprehensive configuration <a href="https://themes.gohugo.io/theme/minimo/docs/example-config-toml/">example</a>, but the only required key is the
<code>recentPostsLength</code>. Forgetting to add this key will give you an error upon
starting the server.</p>
<p>Fire up the Hugo server and navigate to the URL displayed in the output.  You
should see something beautiful. If not, ensure your configuration is correct.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ hugo server
</code></pre></div><h2 id="adding-content-and-customising">Adding content and customising</h2>
<p>What good are wild baguettes if you can't find them? Being good citizens, we'll
share our knowledge on their habitats in our first blog post.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ hugo new posts/where_to_find_them.md
</code></pre></div><p>The <code>posts</code> directory will be nested under <code>contents</code> in the project root. Fill
this file with whatever pleases you. The important thing is the front
matter. That's the bit in the <code>---</code> block at the top of the file. By default,
Hugo will use the <code>title</code> for the post's title (say what?) and the name of the
file for its URL path. It's important that <code>title</code> is set.</p>
<p>If you're wondering what dictates that front matter, that's the archetype! Hugo
allows you to <a href="https://gohugo.io/content-management/archetypes/">define your own archetypes</a> to streamline adding the content you
wish to provide. The default archetype suffices for a simple blog.</p>
<p>Nesting the new post under the <code>posts</code> directory will also nest it in the URL.
With that in mind, it makes sense to have a <code>posts</code> page on the site. We need to
create a new file for that.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ <span class="nb">echo</span> <span class="s1">&#39;---\ntitle: Posts\n---&#39;</span> &gt; content/posts/_index.md
</code></pre></div><p>Each <a href="https://gohugo.io/content-management/sections/">section</a>, or distinct part of our site, can contain a <code>_index.md</code> file that
represents the section itself rather than its children, like posts do.  The
value we give to <code>title</code> here will be what's shown on the section page and in
the navigation bar. One more change: add <code>sectionPagesMenu = &quot;main&quot;</code> to
<code>config.toml</code>. The value you pass here should be the name of your menu, which
could be different for your chosen theme. For Minimo, it is <code>main</code>.</p>
<p>Start the server again and see our new navigation menu and post rendered. The
<code>-D</code> flag here indicates we want to render draft posts in addition to regular
ones.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ hugo server -D
</code></pre></div><p>Let's personalise the theme a bit. Minimo gives you a very easy way to override
the CSS with the <code>customCSS</code> key in <code>config.toml</code>. You can read about a specific
use case <a href="https://discourse.gohugo.io/t/minimo-css-customization/7173/4">here</a>, where the accent colour is changed.</p>
<p>Changing layout content is down to Hugo, so it should be independent of the
theme. Say we want to add an additional line to the footer of our site. Simply
add files to the <code>layout</code> directory. They must be the same name as the ones your
theme uses. For Minimo, this meant <a href="https://github.com/kwyse/personal-website/blob/41e3702fa15589739e22f64870acb9c19e9a7322/layouts/partials/footer/attribution.html">adding a footer partial</a> for the new content,
as well as <a href="https://github.com/kwyse/personal-website/blob/41e3702fa15589739e22f64870acb9c19e9a7322/layouts/partials/footer.html">overriding the existing footer</a>. You can read more about Hugo's
solution for customising your theme <a href="https://gohugo.io/themes/customizing/">here</a>.</p>
<p>Thus far, the only thing that tripped me up was Minimo requiring that one
<code>recentPostsLength</code> key to have a value. Hugo itself has been completely
transparent in what it's doing. If you look at the folder structure of our
project, you'll see every file we've added has a known purpose. If we want to
make adjustments to common configuration options, <code>config.toml</code> is a good place
to start. If we want to override specific parts of our theme, we just provide
the override in the <code>layouts</code> directory. The organisation of our site content
will correspond to the folder structure inside the <code>content</code> directory. So far,
it's all very intuitive!</p>
<h2 id="deploying">Deploying</h2>
<p>I promised we'd deploy this so the whole world would know where to hunt for wild
baguettes. Hugo has a <a href="https://gohugo.io/hosting-and-deployment/deployment-with-nanobox/">good guide</a> on <a href="https://nanobox.io/">Nanobox</a> deployment. I hadn't heard of
Nanobox before so I did some digging. Essentially they provide a managed Docker
container for you. They are not a cloud provider and rely on you having an
account with a service such as AWS or DigitalOcean.  Once you link the accounts,
Nanobox will take care of deployments to the hosts of the cloud
provider. Nanobox itself is completely free on the basic plan. Given one of the
goals of this project was to streamline the process of actually <em>blogging</em>, this
sounded like the perfect solution.</p>
<p>I'll be using DigitalOcean here because I already had an account. Follow the
<a href="https://docs.nanobox.io/providers/hosting-accounts/digitalocean/">Nanobox guide</a> to generate a DigitalOcean key and give Nanobox read/write access
to your account. Then launch the new app.</p>
<p>You'll then need to <a href="https://docs.nanobox.io/install/">install</a> the Nanobox CLI locally. Nanobox needs two files for
us to tell it how to run our Hugo project: <a href="https://github.com/kwyse/personal-website/blob/65791863bff9abfd4c6e430ca38d601c90d9b61c/boxfile.yml"><code>boxfile.yml</code></a>, which tells Nanobox
what commands to run, and <a href="https://github.com/kwyse/personal-website/blob/65791863bff9abfd4c6e430ca38d601c90d9b61c/install.sh"><code>install.sh</code></a>, which is called by <code>boxfile.yml</code> and
actually installs Hugo inside the container. Add these files to your project,
then tell Nanobox to deploy!</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ nanobox remote add &lt;nanobox-app-name&gt; $ nanobox deploy
</code></pre></div><p>Visit your Nanobox portal and find a link that takes you to the deployed site!
Too easy!</p>
<p>The next logical step is to set up a domain name for your site. I use <a href="https://www.namecheap.com/">NameCheap</a>
and have been very happy with their service. The prices are competitive and they
provide a very intuitive dashboard for adding DNS records.</p>
<h2 id="next-steps">Next steps</h2>
<p>There's <strong>loads</strong> of places we could go from here. If you want your site to get
even marginal traffic, definitely get a domain name for it.  You'll probably
then want to look into adding TLS to your site. Even if you only serve static
content, it's always a <a href="https://security.stackexchange.com/questions/142496/which-security-measures-make-sense-for-a-static-web-site">good idea</a> to enable it. After that, you can check out the
depths of <a href="https://gohugo.io/documentation/">Hugo's documentation</a>. We've barely scratched the surface of what it's
capable of.</p>
<p>This will probably be the path that I take. I'm impressed with how easy the
whole experience was, primarily due to the solid documentation and usability of
Hugo. Hopefully you'll see more content on here soon!</p>
]]></content></item></channel></rss>