<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>softdev on The Blog of Krishan Wyse</title><link>https://www.kwyse.com/categories/softdev/</link><description>Recent content in softdev on The Blog of Krishan Wyse</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Wed, 28 Mar 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.kwyse.com/categories/softdev/index.xml" rel="self" type="application/rss+xml"/><item><title>On Fundamentals</title><link>https://www.kwyse.com/posts/on-fundamentals/</link><pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate><guid>https://www.kwyse.com/posts/on-fundamentals/</guid><description>A recent vacation gave me time to catch up on my backlog of books. Stop Guessing, by Nat Greene, was my first target. It's a book about the tendency to guess solutions when faced with hard problems, and instead proposes a rigorous, fact-backed and systematic approach to problem solving. There is a chapter dedicated to understanding the fundamentals of the problem space that was particularly poignant to me.
If we define a hard problem as simply something that is resistant to guesses, impactful and yet hard to isolate and reproduce, then they're not uncommon in the life of a software developer.</description></item><item><title>Grokking Entity-Component-Systems</title><link>https://www.kwyse.com/posts/grokking-entity-component-systems/</link><pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.kwyse.com/posts/grokking-entity-component-systems/</guid><description>I've spent many commutes in the last few months learning the intricacies of Specs, an entity-component-system (ECS) written in Rust and, to be more broad, ECSs in general. ECSs have proved to be a much deeper topic than I had initially anticipated. Now I'd like to explain my findings in order to solidify that knowledge.
ECSs are a decoupling pattern. They're most frequently seen in game development where we often have many similar yet distinct types of game objects.</description></item></channel></rss>